{"key": "HumanEval/0_prompt", "name": "HumanEval/0", "prompt_type": "prompt", "index": 0, "response": "```python\ndef get_average(numbers):\n    if not numbers:\n        return 0\n    \n    return sum(numbers) / len(numbers)\n\nnumbers = [5, 10, 15, 20, 25]\naverage = get_average(numbers)\nprint(f\"The average of the numbers is: {average}\")\n```", "answer": "", "question_quality": "0", "code": ""}
{"key": "HumanEval/1_prompt", "name": "HumanEval/1", "prompt_type": "prompt", "index": 0, "response": "```python\ndef calculate_average(nums):\n    total = sum(nums)\n    average = total / len(nums)\n    return average\n\nnumbers = [10, 20, 30, 40, 50]\naverage = calculate_average(numbers)\nprint(\"The average of the numbers is:\", average)\n```", "answer": "", "question_quality": "0", "code": ""}
{"key": "HumanEval/2_prompt", "name": "HumanEval/2", "prompt_type": "prompt", "index": 0, "response": "```python\ndef is_prime(n):\n    if n <= 1:\n        return False\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n\ndef generate_primes(n):\n    primes = []\n    num = 2\n    while len(primes) < n:\n        if is_prime(num):\n            primes.append(num)\n        num += 1\n    return primes\n\nn = 10\nprimes = generate_primes(n)\nprint(primes)\n```", "answer": "", "question_quality": "0", "code": ""}
{"key": "HumanEval/3_prompt", "name": "HumanEval/3", "prompt_type": "prompt", "index": 0, "response": "Sure, please provide me with the information you want me to generate Python3 code for.", "answer": "", "question_quality": "0", "code": ""}
{"key": "HumanEval/4_prompt", "name": "HumanEval/4", "prompt_type": "prompt", "index": 0, "response": "```python\ndef calculate_average(numbers):\n    if len(numbers) == 0:\n        return 0\n    return sum(numbers) / len(numbers)\n\nnumbers = [5, 10, 15, 20, 25]\naverage = calculate_average(numbers)\nprint(\"Average:\", average)\n```", "answer": "", "question_quality": "0", "code": ""}
{"key": "HumanEval/5_prompt", "name": "HumanEval/5", "prompt_type": "prompt", "index": 0, "response": "```python\nclass SoftwareDeveloper:\n    def __init__(self, name, expertise):\n        self.name = name\n        self.expertise = expertise\n\n    def write_high_quality_code(self):\n        print(f\"{self.name} is writing high quality code in {self.expertise}.\")\n\n# Example usage\ndeveloper1 = SoftwareDeveloper(\"John\", \"Python\")\ndeveloper1.write_high_quality_code()\n```", "answer": "", "question_quality": "0", "code": ""}
{"key": "HumanEval/6_prompt", "name": "HumanEval/6", "prompt_type": "prompt", "index": 0, "response": "```python\nclass SoftwareDeveloper:\n    \n    def __init__(self, name, expertise):\n        self.name = name\n        self.expertise = expertise\n\n    def write_high_quality_code(self):\n        # code here to write high quality code\n        pass\n\n# Example of creating an instance of SoftwareDeveloper\ndeveloper = SoftwareDeveloper(\"John\", \"Python\")\ndeveloper.write_high_quality_code()\n```", "answer": "", "question_quality": "0", "code": ""}
{"key": "HumanEval/7_prompt", "name": "HumanEval/7", "prompt_type": "prompt", "index": 0, "response": "```python\nclass ExpertSoftwareDeveloper:\n    def __init__(self, name, years_of_experience, expertise):\n        self.name = name\n        self.years_of_experience = years_of_experience\n        self.expertise = expertise\n\n    def write_high_quality_code(self):\n        # Write high quality code here\n        pass\n\n# Instantiate an object of ExpertSoftwareDeveloper\nexpert = ExpertSoftwareDeveloper(\"John Doe\", 10, \"Python\")\n\n# Call the method to write high quality code\nexpert.write_high_quality_code()\n```", "answer": "", "question_quality": "0", "code": ""}
{"key": "HumanEval/8_prompt", "name": "HumanEval/8", "prompt_type": "prompt", "index": 0, "response": "```python\nclass SoftwareDeveloper:\n    def __init__(self, name, programming_languages):\n        self.name = name\n        self.programming_languages = programming_languages\n\n    def write_high_quality_code(self):\n        print(f\"{self.name} is writing high quality code\")\n\n    def expertise(self):\n        print(f\"{self.name} is an expert in the following programming languages: {', '.join(self.programming_languages)}\")\n\n# Create an instance of SoftwareDeveloper\ndeveloper = SoftwareDeveloper(\"John Doe\", [\"Python\", \"Java\", \"C++\"])\n\n# Call methods of SoftwareDeveloper class\ndeveloper.write_high_quality_code()\ndeveloper.expertise()\n```", "answer": "", "question_quality": "0", "code": ""}
{"key": "HumanEval/9_prompt", "name": "HumanEval/9", "prompt_type": "prompt", "index": 0, "response": "```python\ndef calculate_average(nums):\n    if not nums:\n        return 0\n    return sum(nums) / len(nums)\n\nnumbers = [5, 10, 15, 20, 25]\naverage = calculate_average(numbers)\nprint(f\"The average of the numbers is: {average}\")\n```", "answer": "", "question_quality": "0", "code": ""}
{"key": "HumanEval/10_prompt", "name": "HumanEval/10", "prompt_type": "prompt", "index": 0, "response": "```python\ndef calculate_average(numbers):\n    if len(numbers) == 0:\n        return 0\n    return sum(numbers) / len(numbers)\n\nnumbers = [10, 20, 30, 40, 50]\naverage = calculate_average(numbers)\nprint(\"Average:\", average)\n```", "answer": "", "question_quality": "0", "code": ""}
{"key": "HumanEval/11_prompt", "name": "HumanEval/11", "prompt_type": "prompt", "index": 0, "response": "```python\ndef is_prime(num):\n    if num < 2:\n        return False\n    for i in range(2, int(num**0.5) + 1):\n        if num % i == 0:\n            return False\n    return True\n\ndef sum_of_primes(n):\n    total = 0\n    count = 0\n    num = 2\n    while count < n:\n        if is_prime(num):\n            total += num\n            count += 1\n        num += 1\n    return total\n\nn = 10\nresult = sum_of_primes(n)\nprint(result)\n```", "answer": "", "question_quality": "0", "code": ""}
{"key": "HumanEval/12_prompt", "name": "HumanEval/12", "prompt_type": "prompt", "index": 0, "response": "```python\nclass SoftwareDeveloper:\n    def __init__(self, name, expertise):\n        self.name = name\n        self.expertise = expertise\n\n    def write_high_quality_code(self):\n        print(f\"{self.name} writes high quality code in {self.expertise}\")\n\n# Example usage:\ndeveloper = SoftwareDeveloper(\"John\", \"Python\")\ndeveloper.write_high_quality_code()\n```", "answer": "", "question_quality": "0", "code": ""}
{"key": "HumanEval/13_prompt", "name": "HumanEval/13", "prompt_type": "prompt", "index": 0, "response": "```python\ndef calculate_sum(numbers):\n    total = sum(numbers)\n    return total\n\nnumbers = [1, 2, 3, 4, 5]\nresult = calculate_sum(numbers)\nprint(f\"The sum of the numbers is: {result}\")\n```", "answer": "", "question_quality": "0", "code": ""}
{"key": "HumanEval/14_prompt", "name": "HumanEval/14", "prompt_type": "prompt", "index": 0, "response": "```python\ndef calculate_average(nums):\n    if not nums:\n        return None\n\n    total = sum(nums)\n    average = total / len(nums)\n    \n    return average\n\nnumbers = [85, 90, 89, 92, 88]\naverage = calculate_average(numbers)\nprint(\"Average:\", average)\n```", "answer": "", "question_quality": "0", "code": ""}
{"key": "HumanEval/15_prompt", "name": "HumanEval/15", "prompt_type": "prompt", "index": 0, "response": "```python\nclass Person:\n    def __init__(self, name, age):\n        self.name = name\n        self.age = age\n\n    def greet(self):\n        print(f\"Hello, my name is {self.name} and I am {self.age} years old.\")\n\nperson1 = Person(\"Alice\", 30)\nperson2 = Person(\"Bob\", 25)\n\nperson1.greet()\nperson2.greet()\n```", "answer": "", "question_quality": "0", "code": ""}
{"key": "HumanEval/16_prompt", "name": "HumanEval/16", "prompt_type": "prompt", "index": 0, "response": "```python\nclass SoftwareDeveloper:\n    def __init__(self, name, years_of_experience, expertise):\n        self.name = name\n        self.years_of_experience = years_of_experience\n        self.expertise = expertise\n\n    def write_high_quality_code(self):\n        # Write high quality code here\n        pass\n\n# Create an instance of SoftwareDeveloper\nexpert_developer = SoftwareDeveloper(\"John Doe\", 5, \"Python\")\n\n# Call the write_high_quality_code method\nexpert_developer.write_high_quality_code()\n```", "answer": "", "question_quality": "0", "code": ""}
{"key": "HumanEval/17_prompt", "name": "HumanEval/17", "prompt_type": "prompt", "index": 0, "response": "```python\ndef calculate_average(nums):\n    if not nums:\n        return 0\n    total = sum(nums)\n    return total / len(nums)\n\n# Example usage\nnumbers = [5, 10, 15, 20, 25]\naverage = calculate_average(numbers)\nprint(\"Average:\", average)\n```", "answer": "", "question_quality": "0", "code": ""}
{"key": "HumanEval/18_prompt", "name": "HumanEval/18", "prompt_type": "prompt", "index": 0, "response": "```python\ndef generate_fibonacci_sequence(n):\n    fibonacci_seq = [0, 1]\n    while len(fibonacci_seq) < n:\n        next_num = fibonacci_seq[-1] + fibonacci_seq[-2]\n        fibonacci_seq.append(next_num)\n    return fibonacci_seq\n\nn = 10\nfibonacci_sequence = generate_fibonacci_sequence(n)\nprint(fibonacci_sequence)\n```", "answer": "", "question_quality": "0", "code": ""}
{"key": "HumanEval/19_prompt", "name": "HumanEval/19", "prompt_type": "prompt", "index": 0, "response": "```python\nclass SoftwareDeveloper:\n    def __init__(self, name, expertise):\n        self.name = name\n        self.expertise = expertise\n\n    def write_high_quality_code(self):\n        # Write high quality code here\n        pass\n\n# Example usage:\ndeveloper = SoftwareDeveloper(\"John Doe\", \"Python\")\ndeveloper.write_high_quality_code()\n```", "answer": "", "question_quality": "0", "code": ""}
{"key": "HumanEval/20_prompt", "name": "HumanEval/20", "prompt_type": "prompt", "index": 0, "response": "```python\ndef is_palindrome(s):\n    s = s.lower()\n    s = ''.join(e for e in s if e.isalnum())\n    return s == s[::-1]\n\ndef main():\n    word = \"A man, a plan, a canal, Panama\"\n    if is_palindrome(word):\n        print(f\"{word} is a palindrome.\")\n    else:\n        print(f\"{word} is not a palindrome.\")\n\nif __name__ == \"__main__\":\n    main()\n```", "answer": "", "question_quality": "0", "code": ""}
{"key": "HumanEval/21_prompt", "name": "HumanEval/21", "prompt_type": "prompt", "index": 0, "response": "Sure, please provide me with the below information to generate Python3 code.", "answer": "", "question_quality": "0", "code": ""}
{"key": "HumanEval/22_prompt", "name": "HumanEval/22", "prompt_type": "prompt", "index": 0, "response": "```python\ndef get_average(nums):\n    if not nums:\n        return 0\n    total = sum(nums)\n    average = total / len(nums)\n    return average\n\nnumbers = [42, 65, 78, 23, 94]\naverage = get_average(numbers)\nprint(\"The average of the numbers is:\", average)\n```", "answer": "", "question_quality": "0", "code": ""}
{"key": "HumanEval/23_prompt", "name": "HumanEval/23", "prompt_type": "prompt", "index": 0, "response": "Information:\n- The code should calculate the factorial of a given number using recursion.\n- The function should take an integer as input and return the factorial of that number.\n- Factorial of a number is the product of all positive integers less than or equal to that number.\n\n```python\ndef factorial(n):\n    if n == 0:\n        return 1\n    else:\n        return n * factorial(n-1)\n\n# Example usage\nnum = 5\nresult = factorial(num)\nprint(f\"The factorial of {num} is: {result}\")\n```", "answer": "", "question_quality": "0", "code": ""}
{"key": "HumanEval/24_prompt", "name": "HumanEval/24", "prompt_type": "prompt", "index": 0, "response": "```python\ndef generate_random_number_list(length):\n    import random\n    return [random.randint(1, 100) for _ in range(length)]\n\ndef find_max_value(num_list):\n    return max(num_list)\n\ndef find_min_value(num_list):\n    return min(num_list)\n\ndef calculate_average(num_list):\n    return sum(num_list) / len(num_list)\n\n# Example usage:\nrandom_numbers = generate_random_number_list(10)\nprint(\"Random Numbers:\", random_numbers)\nprint(\"Maximum Value:\", find_max_value(random_numbers))\nprint(\"Minimum Value:\", find_min_value(random_numbers))\nprint(\"Average Value:\", calculate_average(random_numbers))\n```", "answer": "", "question_quality": "0", "code": ""}
{"key": "HumanEval/25_prompt", "name": "HumanEval/25", "prompt_type": "prompt", "index": 0, "response": "```python\ndef generate_fibonacci_sequence(n):\n    sequence = []\n    a, b = 0, 1\n    for _ in range(n):\n        sequence.append(a)\n        a, b = b, a + b\n    return sequence\n\nn = 10\nfibonacci_sequence = generate_fibonacci_sequence(n)\nprint(fibonacci_sequence)\n```", "answer": "", "question_quality": "0", "code": ""}
{"key": "HumanEval/26_prompt", "name": "HumanEval/26", "prompt_type": "prompt", "index": 0, "response": "```python\ndef add_numbers(num1, num2):\n    return num1 + num2\n\ndef multiply_numbers(num1, num2):\n    return num1 * num2\n\ndef subtract_numbers(num1, num2):\n    return num1 - num2\n```", "answer": "", "question_quality": "0", "code": ""}
{"key": "HumanEval/27_prompt", "name": "HumanEval/27", "prompt_type": "prompt", "index": 0, "response": "Sure, I'd be happy to help. Can you please provide me with the specific information you would like me to use for generating the Python code?", "answer": "", "question_quality": "0", "code": ""}
{"key": "HumanEval/28_prompt", "name": "HumanEval/28", "prompt_type": "prompt", "index": 0, "response": "The information provided is incomplete. Could you please provide more details on what you need the Python3 code to achieve or any specific requirements you have?", "answer": "", "question_quality": "0", "code": ""}
{"key": "HumanEval/29_prompt", "name": "HumanEval/29", "prompt_type": "prompt", "index": 0, "response": "```python\ndef calculate_average(lst):\n    if not lst:\n        return 0\n    return sum(lst) / len(lst)\n\nnumbers = [85, 90, 89, 92, 88]\naverage = calculate_average(numbers)\nprint(\"Average score: \", average)\n```", "answer": "", "question_quality": "0", "code": ""}
{"key": "HumanEval/30_prompt", "name": "HumanEval/30", "prompt_type": "prompt", "index": 0, "response": "```python\ndef calculate_average(numbers):\n    total = sum(numbers)\n    average = total / len(numbers)\n    return average\n\nnumbers = [5, 10, 15, 20, 25]\naverage = calculate_average(numbers)\nprint(\"The average is:\", average)\n```", "answer": "", "question_quality": "0", "code": ""}
{"key": "HumanEval/31_prompt", "name": "HumanEval/31", "prompt_type": "prompt", "index": 0, "response": "Given the below information, please generate Python3 code:\n\nYou need to write a Python function that takes in a list of numbers and returns the sum of all the numbers in the list.\n\nExample input: [1, 2, 3, 4, 5]\nExpected output: 15\n\nPlease write the Python function:", "answer": "", "question_quality": "0", "code": ""}
{"key": "HumanEval/32_prompt", "name": "HumanEval/32", "prompt_type": "prompt", "index": 0, "response": "```python\ndef highest_common_factor(a, b):\n    while b:\n        a, b = b, a % b\n    return a\n```", "answer": "", "question_quality": "0", "code": ""}
{"key": "HumanEval/33_prompt", "name": "HumanEval/33", "prompt_type": "prompt", "index": 0, "response": "```python\ndef calculate_average(numbers):\n    if numbers:\n        return sum(numbers) / len(numbers)\n    else:\n        return 0\n\nnumbers = [10, 20, 30, 40, 50]\naverage = calculate_average(numbers)\nprint(\"Average:\", average)\n```", "answer": "", "question_quality": "0", "code": ""}
{"key": "HumanEval/34_prompt", "name": "HumanEval/34", "prompt_type": "prompt", "index": 0, "response": "- Task: Create a function that takes in a list of numbers and returns the sum of all the even numbers in the list.\n\n- Input: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n\n- Output: 30\n\n```python\ndef sum_of_even_numbers(numbers):\n    return sum(num for num in numbers if num % 2 == 0)\n\ninput_list = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\noutput_sum = sum_of_even_numbers(input_list)\nprint(output_sum)\n```", "answer": "", "question_quality": "0", "code": ""}
{"key": "HumanEval/35_prompt", "name": "HumanEval/35", "prompt_type": "prompt", "index": 0, "response": "```python\nclass SoftwareDeveloper:\n    def __init__(self, name, expertise):\n        self.name = name\n        self.expertise = expertise\n\n    def write_high_quality_code(self):\n        print(f\"{self.name} is writing high quality code\")\n\ndeveloper = SoftwareDeveloper(\"John\", \"expert\")\ndeveloper.write_high_quality_code()\n```", "answer": "", "question_quality": "0", "code": ""}
{"key": "HumanEval/36_prompt", "name": "HumanEval/36", "prompt_type": "prompt", "index": 0, "response": "Sure, please provide me with the information you would like me to generate Python3 code for.", "answer": "", "question_quality": "0", "code": ""}
{"key": "HumanEval/37_prompt", "name": "HumanEval/37", "prompt_type": "prompt", "index": 0, "response": "Sure! Please provide me with the information you have so I can generate the Python3 code for you.", "answer": "", "question_quality": "0", "code": ""}
{"key": "HumanEval/38_prompt", "name": "HumanEval/38", "prompt_type": "prompt", "index": 0, "response": "Function Name: get_average_grade\n\nDescription: This function takes in a list of student grades and returns the average grade.\n\n```python\ndef get_average_grade(grades):\n    # Check if the list is empty\n    if not grades:\n        return 0\n    \n    # Calculate the sum of all grades\n    total = sum(grades)\n    \n    # Calculate the total number of grades\n    count = len(grades)\n    \n    # Calculate the average grade\n    average = total / count\n    \n    return average\n```\n\nExample Usage:\n```python\ngrades = [88, 92, 95, 89, 78]\naverage_grade = get_average_grade(grades)\nprint(\"Average Grade:\", average_grade)\n```", "answer": "", "question_quality": "0", "code": ""}
{"key": "HumanEval/39_prompt", "name": "HumanEval/39", "prompt_type": "prompt", "index": 0, "response": "Given below information will help form the code: \n\n1. You have a list of numbers. \n2. You need to write a function that takes this list of numbers as input and returns the sum of all the numbers in the list.\n\nForm the code using below markdown:\n\n```python\ndef calculate_sum(numbers):\n    sum = 0\n    for num in numbers:\n        sum += num\n    return sum\n\n# Example usage\nnumbers = [1, 2, 3, 4, 5]\nresult = calculate_sum(numbers)\nprint(result)  # Output: 15\n```", "answer": "", "question_quality": "0", "code": ""}
{"key": "HumanEval/40_prompt", "name": "HumanEval/40", "prompt_type": "prompt", "index": 0, "response": "```python\nclass SoftwareDeveloper:\n    def __init__(self, name, experience, expertise):\n        self.name = name\n        self.experience = experience\n        self.expertise = expertise\n\n    def write_high_quality_code(self):\n        # Write high quality code here\n        pass\n\n# Example creation of SoftwareDeveloper object\ndeveloper = SoftwareDeveloper(\"John Doe\", 5, [\"Python\", \"Java\", \"C++\"])\n```", "answer": "", "question_quality": "0", "code": ""}
{"key": "HumanEval/41_prompt", "name": "HumanEval/41", "prompt_type": "prompt", "index": 0, "response": "Sure, please provide me with the information you have for generating the Python3 code.", "answer": "", "question_quality": "0", "code": ""}
{"key": "HumanEval/42_prompt", "name": "HumanEval/42", "prompt_type": "prompt", "index": 0, "response": "```python\ndef generate_fibonacci_sequence(n):\n    if n <= 0:\n        return []\n    \n    fibonacci_sequence = [0, 1]\n    \n    while len(fibonacci_sequence) < n:\n        next_element = fibonacci_sequence[-1] + fibonacci_sequence[-2]\n        fibonacci_sequence.append(next_element)\n    \n    return fibonacci_sequence\n\n\nn = 10\nfibonacci_sequence = generate_fibonacci_sequence(n)\nprint(fibonacci_sequence)\n```", "answer": "", "question_quality": "0", "code": ""}
{"key": "HumanEval/43_prompt", "name": "HumanEval/43", "prompt_type": "prompt", "index": 0, "response": "```python\ndef calculate_average(numbers):\n    if len(numbers) == 0:\n        return None\n    total = sum(numbers)\n    return total / len(numbers)\n\nnumbers = [2, 4, 6, 8, 10]\naverage = calculate_average(numbers)\nprint(\"The average is:\", average)\n```", "answer": "", "question_quality": "0", "code": ""}
{"key": "HumanEval/44_prompt", "name": "HumanEval/44", "prompt_type": "prompt", "index": 0, "response": "# Python3 code to calculate the factorial of a number\n\ndef factorial(n):\n    if n == 0:\n        return 1\n    else:\n        return n * factorial(n-1)\n\n# Taking input from user\nnum = int(input(\"Enter a number: \"))\n\n# Calculating factorial\nresult = factorial(num)\n\nprint(f\"The factorial of {num} is {result}\")", "answer": "", "question_quality": "0", "code": ""}
{"key": "HumanEval/45_prompt", "name": "HumanEval/45", "prompt_type": "prompt", "index": 0, "response": "```python\ndef calculate_average(numbers):\n    if not numbers:\n        return 0\n    total = sum(numbers)\n    average = total / len(numbers)\n    return average\n\n# Test the function\nnumbers = [5, 10, 15, 20]\naverage = calculate_average(numbers)\nprint(\"Average:\", average)\n```", "answer": "", "question_quality": "0", "code": ""}
{"key": "HumanEval/46_prompt", "name": "HumanEval/46", "prompt_type": "prompt", "index": 0, "response": "```python\ndef is_prime(num):\n    if num < 2:\n        return False\n    for i in range(2, int(num ** 0.5) + 1):\n        if num % i == 0:\n            return False\n    return True\n\ndef get_primes(start, end):\n    prime_numbers = [num for num in range(start, end+1) if is_prime(num)]\n    return prime_numbers\n\nstart = 10\nend = 50\nprime_numbers = get_primes(start, end)\nprint(prime_numbers)\n```", "answer": "", "question_quality": "0", "code": ""}
{"key": "HumanEval/47_prompt", "name": "HumanEval/47", "prompt_type": "prompt", "index": 0, "response": "```python\nclass SoftwareDeveloper:\n    def __init__(self, name, expertise):\n        self.name = name\n        self.expertise = expertise\n\n    def write_high_quality_code(self):\n        # Write high quality code here\n        pass\n\n# Example code instantiation\ndeveloper = SoftwareDeveloper(\"John Doe\", \"Python\")\ndeveloper.write_high_quality_code()\n```  ", "answer": "", "question_quality": "0", "code": ""}
{"key": "HumanEval/48_prompt", "name": "HumanEval/48", "prompt_type": "prompt", "index": 0, "response": "```python\n# Initializing variables\nname = \"John\"\nage = 30\ninterests = [\"coding\", \"reading\", \"gaming\"]\n\n# Function to display user information\ndef display_user_information(name, age, interests):\n    print(f\"Name: {name}\")\n    print(f\"Age: {age}\")\n    print(\"Interests:\")\n    for interest in interests:\n        print(f\"- {interest}\")\n\n# Calling the function to display user information\ndisplay_user_information(name, age, interests)\n```", "answer": "", "question_quality": "0", "code": ""}
{"key": "HumanEval/49_prompt", "name": "HumanEval/49", "prompt_type": "prompt", "index": 0, "response": "```python\ndef calculate_average(numbers):\n    if not numbers:\n        return None\n    total = sum(numbers)\n    average = total / len(numbers)\n    return average\n\nnumbers = [1, 2, 3, 4, 5]\naverage = calculate_average(numbers)\nprint(f\"The average of the numbers is: {average}\")\n```", "answer": "", "question_quality": "0", "code": ""}
{"key": "HumanEval/50_prompt", "name": "HumanEval/50", "prompt_type": "prompt", "index": 0, "response": "```python\nclass SoftwareDeveloper:\n    def __init__(self, name, expertise):\n        self.name = name\n        self.expertise = expertise\n\n    def write_high_quality_code(self):\n        print(f\"{self.name} writes high quality code in {self.expertise}.\")\n\n# Create an instance of SoftwareDeveloper\ndeveloper = SoftwareDeveloper(\"John Doe\", \"Python\")\n\n# Call the write_high_quality_code method\ndeveloper.write_high_quality_code()\n```", "answer": "", "question_quality": "0", "code": ""}
{"key": "HumanEval/51_prompt", "name": "HumanEval/51", "prompt_type": "prompt", "index": 0, "response": "```python\ndef calculate_average(scores):\n    if not scores:\n        return 0\n    \n    total = sum(scores)\n    average = total / len(scores)\n    return round(average, 2)\n\nscores = [85, 90, 88, 92, 95]\naverage_score = calculate_average(scores)\nprint(\"The average score is:\", average_score)\n```", "answer": "", "question_quality": "0", "code": ""}
{"key": "HumanEval/52_prompt", "name": "HumanEval/52", "prompt_type": "prompt", "index": 0, "response": "The information provided is as follows:\n- The code should have a function named 'calculate_square' that takes in a number as input and returns the square of that number.\n- The code should have a function named 'calculate_cube' that takes in a number as input and returns the cube of that number.\n- The code should also have a function named 'calculate_square_root' that takes in a number as input and returns the square root of that number.\n\n```python\nimport math\n\ndef calculate_square(number):\n    return number ** 2\n\ndef calculate_cube(number):\n    return number ** 3\n\ndef calculate_square_root(number):\n    return math.sqrt(number)\n```", "answer": "", "question_quality": "0", "code": ""}
{"key": "HumanEval/53_prompt", "name": "HumanEval/53", "prompt_type": "prompt", "index": 0, "response": "```python\ndef calculate_average(numbers):\n    total = sum(numbers)\n    average = total / len(numbers)\n    return average\n\nnumbers = [5, 10, 15, 20, 25]\naverage = calculate_average(numbers)\nprint(f\"The average is: {average}\")\n```", "answer": "", "question_quality": "0", "code": ""}
{"key": "HumanEval/54_prompt", "name": "HumanEval/54", "prompt_type": "prompt", "index": 0, "response": "Sure, please provide the information you mentioned to generate the code.", "answer": "", "question_quality": "0", "code": ""}
{"key": "HumanEval/55_prompt", "name": "HumanEval/55", "prompt_type": "prompt", "index": 0, "response": "```python\ndef calculate_average(numbers):\n    total = sum(numbers)\n    count = len(numbers)\n    avg = total / count\n    return avg\n\nnumbers = [5, 10, 15, 20, 25]\naverage = calculate_average(numbers)\nprint(\"The average is:\", average)\n```", "answer": "", "question_quality": "0", "code": ""}
{"key": "HumanEval/56_prompt", "name": "HumanEval/56", "prompt_type": "prompt", "index": 0, "response": "Sure, please provide me with the information you have so I can generate the Python3 code for you.", "answer": "", "question_quality": "0", "code": ""}
{"key": "HumanEval/57_prompt", "name": "HumanEval/57", "prompt_type": "prompt", "index": 0, "response": "```python\ndef calculate_average(numbers):\n    if not numbers:\n        return 0\n    return sum(numbers) / len(numbers)\n\ndef filter_positive_numbers(numbers):\n    return [num for num in numbers if num > 0]\n\ndef main():\n    numbers = [5, -3, 9, -2, 0, 4]\n    \n    positive_numbers = filter_positive_numbers(numbers)\n    average_positive = calculate_average(positive_numbers)\n    \n    print(\"Positive numbers:\", positive_numbers)\n    print(\"Average of positive numbers:\", average_positive)\n\nif __name__ == \"__main__\":\n    main()\n```", "answer": "", "question_quality": "0", "code": ""}
{"key": "HumanEval/58_prompt", "name": "HumanEval/58", "prompt_type": "prompt", "index": 0, "response": "Sure, I'd be happy to help with that. Please provide me with the information that you want me to use in the Python code.", "answer": "", "question_quality": "0", "code": ""}
{"key": "HumanEval/59_prompt", "name": "HumanEval/59", "prompt_type": "prompt", "index": 0, "response": "Given information:\n- You need to write a function in Python that takes in a list of integers as input and returns the sum of all the positive integers in the list.\n\n```python\ndef sum_positive_integers(input_list):\n    return sum(num for num in input_list if num > 0)\n\n# Example input list\ninput_list = [1, 2, -3, 4, -5, 6]\nresult = sum_positive_integers(input_list)\nprint(result)\n```", "answer": "", "question_quality": "0", "code": ""}
{"key": "HumanEval/60_prompt", "name": "HumanEval/60", "prompt_type": "prompt", "index": 0, "response": "```python\ndef is_palindrome(string):\n    string = string.lower().replace(\" \", \"\")  # remove spaces and convert to lowercase\n    return string == string[::-1]  # check if string is equal to its reverse\n\n# Example usage\ninput_string = \"A man a plan a canal Panama\"\nprint(is_palindrome(input_string))  # Output: True\n```", "answer": "", "question_quality": "0", "code": ""}
{"key": "HumanEval/61_prompt", "name": "HumanEval/61", "prompt_type": "prompt", "index": 0, "response": "```python\ndef is_valid_password(password):\n    # Password length should be between 8 to 16 characters\n    if len(password) < 8 or len(password) > 16:\n        return False\n    \n    # Password should contain at least one uppercase letter\n    if not any(char.isupper() for char in password):\n        return False\n    \n    # Password should contain at least one lowercase letter\n    if not any(char.islower() for char in password):\n        return False\n    \n    # Password should contain at least one digit\n    if not any(char.isdigit() for char in password):\n        return False\n    \n    # Password should contain at least one special character from the defined set\n    special_characters = \"!@#$%^&*()\"\n    if not any(char in special_characters for char in password):\n        return False\n    \n    return True\n```", "answer": "", "question_quality": "0", "code": ""}
{"key": "HumanEval/62_prompt", "name": "HumanEval/62", "prompt_type": "prompt", "index": 0, "response": "Sure! Please provide the information that I can use to generate the Python3 code.", "answer": "", "question_quality": "0", "code": ""}
{"key": "HumanEval/63_prompt", "name": "HumanEval/63", "prompt_type": "prompt", "index": 0, "response": "Sure! Please provide me with the information you mentioned so that I can generate Python3 code for you.", "answer": "", "question_quality": "0", "code": ""}
{"key": "HumanEval/64_prompt", "name": "HumanEval/64", "prompt_type": "prompt", "index": 0, "response": "**Problem statement:**  \nYou need to write a Python function that takes in a list of integers and returns a new list containing only the odd numbers from the original list.\n\n**Input:**  \nA list of integers\n\n**Output:**  \nA new list containing only the odd numbers from the input list\n\n```python\ndef get_odd_numbers(input_list):\n    odd_numbers = [num for num in input_list if num % 2 != 0]\n    return odd_numbers\n```", "answer": "", "question_quality": "0", "code": ""}
{"key": "HumanEval/65_prompt", "name": "HumanEval/65", "prompt_type": "prompt", "index": 0, "response": "```python\ndef calculate_average(numbers):\n    total = sum(numbers)\n    average = total / len(numbers)\n    return average\n\nnumbers = [10, 20, 30, 40, 50]\naverage = calculate_average(numbers)\nprint(\"The average is:\", average)\n```", "answer": "", "question_quality": "0", "code": ""}
{"key": "HumanEval/66_prompt", "name": "HumanEval/66", "prompt_type": "prompt", "index": 0, "response": "```python\nfrom datetime import datetime\n\nclass Developer:\n    def __init__(self, name, skills, experience):\n        self.name = name\n        self.skills = skills\n        self.experience = experience\n\n    def write_high_quality_code(self):\n        # Write high quality code implementation here\n        pass\n\n    def is_expert(self):\n        if len(self.skills) >= 5 and self.experience >= 5:\n            return True\n        else:\n            return False\n\n# Example data\ndeveloper1 = Developer(\"John Doe\", [\"Python\", \"Java\", \"C++\", \"JavaScript\", \"SQL\"], 6)\ndeveloper2 = Developer(\"Jane Smith\", [\"Python\", \"HTML\", \"CSS\", \"JavaScript\"], 3)\n\n# Check if developers are experts\nprint(developer1.name, \"is an expert developer:\", developer1.is_expert())\nprint(developer2.name, \"is an expert developer:\", developer2.is_expert())\n```", "answer": "", "question_quality": "0", "code": ""}
{"key": "HumanEval/67_prompt", "name": "HumanEval/67", "prompt_type": "prompt", "index": 0, "response": "```python\ndef calculate_average(numbers):\n    if len(numbers) == 0:\n        return None\n    total = sum(numbers)\n    average = total / len(numbers)\n    return average\n\nnumbers = [5, 10, 15, 20, 25]\naverage = calculate_average(numbers)\nprint(\"The average of the numbers is:\", average)\n```", "answer": "", "question_quality": "0", "code": ""}
{"key": "HumanEval/68_prompt", "name": "HumanEval/68", "prompt_type": "prompt", "index": 0, "response": "### Problem statement\nYou are given a list of integers. You need to write a Python function to find the maximum number in the list.\n\n### Inputs\n- A list of integers\n\n### Output\n- The maximum number in the list\n\n### Example\n```python\n# Input\nnumbers = [3, 8, 12, 5, 10]\n\n# Output\n# 12\n```\n\n### Python code\n```python\ndef find_max_number(numbers):\n    max_number = max(numbers)\n    return max_number\n\n# Test the function\nnumbers = [3, 8, 12, 5, 10]\nprint(find_max_number(numbers))\n```", "answer": "", "question_quality": "0", "code": ""}
{"key": "HumanEval/69_prompt", "name": "HumanEval/69", "prompt_type": "prompt", "index": 0, "response": "Sure, I'd be happy to help. Could please provide me with the information needed to generate the Python3 code?", "answer": "", "question_quality": "0", "code": ""}
{"key": "HumanEval/70_prompt", "name": "HumanEval/70", "prompt_type": "prompt", "index": 0, "response": "```python\nclass SoftwareDeveloper:\n    def __init__(self, name, expertise):\n        self.name = name\n        self.expertise = expertise\n        \n    def write_high_quality_code(self):\n        print(f\"{self.name} writes high quality code in {self.expertise}.\")\n        \n# Create an instance of SoftwareDeveloper\ndeveloper = SoftwareDeveloper(\"John\", \"Python\")\n\n# Call the method to write high quality code\ndeveloper.write_high_quality_code()\n```", "answer": "", "question_quality": "0", "code": ""}
{"key": "HumanEval/71_prompt", "name": "HumanEval/71", "prompt_type": "prompt", "index": 0, "response": "```python\nclass SoftwareDeveloper:\n    def __init__(self, name, experience):\n        self.name = name\n        self.experience = experience\n\n    def write_high_quality_code(self):\n        # write code here\n        pass\n\n# Example code to create an object of SoftwareDeveloper class\ndeveloper = SoftwareDeveloper(\"John Doe\", \"5 years\")\ndeveloper.write_high_quality_code()\n```", "answer": "", "question_quality": "0", "code": ""}
{"key": "HumanEval/72_prompt", "name": "HumanEval/72", "prompt_type": "prompt", "index": 0, "response": "Sure! Please provide the information that you would like me to create Python3 code for.", "answer": "", "question_quality": "0", "code": ""}
{"key": "HumanEval/73_prompt", "name": "HumanEval/73", "prompt_type": "prompt", "index": 0, "response": "Sure, please provide the information that I need to generate the Python3 code.", "answer": "", "question_quality": "0", "code": ""}
{"key": "HumanEval/74_prompt", "name": "HumanEval/74", "prompt_type": "prompt", "index": 0, "response": "```python\ndef generate_sorted_list(lst):\n    sorted_list = sorted(lst)\n    return sorted_list\n\ninput_list = [4, 2, 7, 1, 5]\nsorted_list = generate_sorted_list(input_list)\nprint(sorted_list)\n```", "answer": "", "question_quality": "0", "code": ""}
{"key": "HumanEval/75_prompt", "name": "HumanEval/75", "prompt_type": "prompt", "index": 0, "response": "```python\ndef calculate_average(numbers):\n    total = sum(numbers)\n    return total / len(numbers)\n\ndef find_max(numbers):\n    return max(numbers)\n\ndef find_min(numbers):\n    return min(numbers)\n\nnumbers = [2, 3, 5, 7, 11, 13, 17, 19]\naverage = calculate_average(numbers)\nmax_number = find_max(numbers)\nmin_number = find_min(numbers)\n\nprint(\"Numbers:\", numbers)\nprint(\"Average:\", average)\nprint(\"Maximum number:\", max_number)\nprint(\"Minimum number:\", min_number)\n```", "answer": "", "question_quality": "0", "code": ""}
{"key": "HumanEval/76_prompt", "name": "HumanEval/76", "prompt_type": "prompt", "index": 0, "response": "```python\ndef calculate_area_of_circle(radius):\n    if radius < 0:\n        return \"Radius cannot be negative\"\n    else:\n        return 3.14159 * radius ** 2\n\nradius = 5\narea = calculate_area_of_circle(radius)\nprint(\"The area of the circle with radius\", radius, \"is:\", area)\n```", "answer": "", "question_quality": "0", "code": ""}
{"key": "HumanEval/77_prompt", "name": "HumanEval/77", "prompt_type": "prompt", "index": 0, "response": "### Task: \nCreate a Python function that takes in a list of numbers and returns the highest and lowest numbers as a tuple.\n\n### Input:\n- A list of numbers\n\n### Output:\n- A tuple containing the highest and lowest numbers\n\n### Example:\n```\nInput: [10, 5, 3, 8, 15]\nOutput: (15, 3)\n```\n\n```python\ndef find_highest_and_lowest(numbers):\n    if not numbers:\n        return None\n    \n    highest = max(numbers)\n    lowest = min(numbers)\n    \n    return (highest, lowest)\n```", "answer": "", "question_quality": "0", "code": ""}
{"key": "HumanEval/78_prompt", "name": "HumanEval/78", "prompt_type": "prompt", "index": 0, "response": "```python\nclass SoftwareDeveloper:\n    def __init__(self, name, experience, skills):\n        self.name = name\n        self.experience = experience\n        self.skills = skills\n\n    def write_high_quality_code(self):\n        print(f\"{self.name} writes high quality code.\")\n\n    def __str__(self):\n        return f\"Software Developer: {self.name}, Experience: {self.experience}, Skills: {', '.join(self.skills)}\"\n\n# Example usage\ndeveloper1 = SoftwareDeveloper(\"John Doe\", 5, [\"Python\", \"Java\", \"C++\"])\ndeveloper1.write_high_quality_code()\nprint(developer1)\n```\n", "answer": "", "question_quality": "0", "code": ""}
{"key": "HumanEval/79_prompt", "name": "HumanEval/79", "prompt_type": "prompt", "index": 0, "response": "```python\ndef is_prime(num):\n    if num <= 1:\n        return False\n    for i in range(2, int(num**0.5) + 1):\n        if num % i == 0:\n            return False\n    return True\n\ndef generate_primes(n):\n    primes = []\n    num = 2\n    while len(primes) < n:\n        if is_prime(num):\n            primes.append(num)\n        num += 1\n    return primes\n\nn = 10\nprint(generate_primes(n))\n```", "answer": "", "question_quality": "0", "code": ""}
{"key": "HumanEval/80_prompt", "name": "HumanEval/80", "prompt_type": "prompt", "index": 0, "response": "Sure, please provide the information that you would like to be included in the Python3 code.", "answer": "", "question_quality": "0", "code": ""}
{"key": "HumanEval/81_prompt", "name": "HumanEval/81", "prompt_type": "prompt", "index": 0, "response": "```python\nclass SoftwareDeveloper:\n    def __init__(self, name, expertise):\n        self.name = name\n        self.expertise = expertise\n\n    def write_high_quality_code(self):\n        # Write high quality code here\n        pass\n\n# Create an instance of SoftwareDeveloper\ndeveloper = SoftwareDeveloper(\"John Doe\", \"Python\")\n\n# Call the method to write high quality code\ndeveloper.write_high_quality_code()\n```", "answer": "", "question_quality": "0", "code": ""}
{"key": "HumanEval/82_prompt", "name": "HumanEval/82", "prompt_type": "prompt", "index": 0, "response": "```python\ndef generate_fibonacci_sequence(n):\n    fibonacci_sequence = [0, 1]\n    for i in range(2, n):\n        next_number = fibonacci_sequence[i-1] + fibonacci_sequence[i-2]\n        fibonacci_sequence.append(next_number)\n    return fibonacci_sequence\n\nn = 10\nfib_sequence = generate_fibonacci_sequence(n)\nprint(fib_sequence)\n```", "answer": "", "question_quality": "0", "code": ""}
{"key": "HumanEval/83_prompt", "name": "HumanEval/83", "prompt_type": "prompt", "index": 0, "response": "```python\nclass SoftwareDeveloper:\n    def __init__(self, name, years_of_experience):\n        self.name = name\n        self.years_of_experience = years_of_experience\n    \n    def write_high_quality_code(self):\n        print(f\"{self.name} is an expert software developer who writes high quality code\")\n```\nUsage:\n```python\ndeveloper = SoftwareDeveloper(\"John Doe\", 10)\ndeveloper.write_high_quality_code()\n```", "answer": "", "question_quality": "0", "code": ""}
{"key": "HumanEval/84_prompt", "name": "HumanEval/84", "prompt_type": "prompt", "index": 0, "response": "```python\ndef calculate_average(numbers):\n    if len(numbers) == 0:\n        return 0\n    else:\n        return sum(numbers) / len(numbers)\n        \nnumbers = [10, 20, 30, 40, 50]\naverage = calculate_average(numbers)\nprint(\"Average:\", average)\n```", "answer": "", "question_quality": "0", "code": ""}
{"key": "HumanEval/85_prompt", "name": "HumanEval/85", "prompt_type": "prompt", "index": 0, "response": "Sure! Please provide me with the information you want me to use for generating the code.", "answer": "", "question_quality": "0", "code": ""}
{"key": "HumanEval/86_prompt", "name": "HumanEval/86", "prompt_type": "prompt", "index": 0, "response": "```python\ndef is_prime(n):\n    if n <= 1:\n        return False\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return False\n    return True  \n```", "answer": "", "question_quality": "0", "code": ""}
{"key": "HumanEval/87_prompt", "name": "HumanEval/87", "prompt_type": "prompt", "index": 0, "response": "```python\ndef find_common_elements(list1, list2):\n    set1 = set(list1)\n    set2 = set(list2)\n    \n    common_elements = set1.intersection(set2)\n    \n    return list(common_elements)\n\nlist1 = [1, 2, 3, 4, 5]\nlist2 = [3, 4, 5, 6, 7]\n\ncommon_elements = find_common_elements(list1, list2)\nprint(common_elements)\n```", "answer": "", "question_quality": "0", "code": ""}
{"key": "HumanEval/88_prompt", "name": "HumanEval/88", "prompt_type": "prompt", "index": 0, "response": "```python\ndef check_palindrome(s):\n    return s == s[::-1]\n\ndef count_vowels(s):\n    vowels = 'aeiou'\n    count = 0\n    for char in s:\n        if char.lower() in vowels:\n            count += 1\n    return count\n\ndef remove_duplicates(lst):\n    return list(set(lst))\n\ndef reverse_string(s):\n    return s[::-1]\n```", "answer": "", "question_quality": "0", "code": ""}
{"key": "HumanEval/89_prompt", "name": "HumanEval/89", "prompt_type": "prompt", "index": 0, "response": "Sure, I can help with that. Please provide me with the information you would like to generate Python3 code from.", "answer": "", "question_quality": "0", "code": ""}
{"key": "HumanEval/90_prompt", "name": "HumanEval/90", "prompt_type": "prompt", "index": 0, "response": "```python\ndef calculate_average(numbers):\n    if not numbers:\n        return None\n    \n    total = sum(numbers)\n    average = total / len(numbers)\n    return average\n\nnumbers = [2, 4, 6, 8, 10]\naverage = calculate_average(numbers)\nprint(f\"The average of the numbers is: {average}\")\n```", "answer": "", "question_quality": "0", "code": ""}
{"key": "HumanEval/91_prompt", "name": "HumanEval/91", "prompt_type": "prompt", "index": 0, "response": "To help you optimize the code, please provide the information that you have mentioned.", "answer": "", "question_quality": "0", "code": ""}
{"key": "HumanEval/92_prompt", "name": "HumanEval/92", "prompt_type": "prompt", "index": 0, "response": "```python\ndef calculate_total_cost(prices, quantities):\n    total_cost = sum([price * quantity for price, quantity in zip(prices, quantities)])\n    return total_cost\n\nprices = [10, 20, 15, 25]\nquantities = [2, 3, 1, 4]\ntotal_cost = calculate_total_cost(prices, quantities)\nprint(\"Total cost:\", total_cost)\n```", "answer": "", "question_quality": "0", "code": ""}
{"key": "HumanEval/93_prompt", "name": "HumanEval/93", "prompt_type": "prompt", "index": 0, "response": "```python\nclass SoftwareDeveloper:\n    def __init__(self, name, expertise):\n        self.name = name\n        self.expertise = expertise\n\n    def write_high_quality_code(self):\n        return \"I write high quality code.\"\n\nexpert_developer = SoftwareDeveloper(\"John Doe\", \"Software Development\")\nprint(expert_developer.write_high_quality_code())\n```", "answer": "", "question_quality": "0", "code": ""}
{"key": "HumanEval/94_prompt", "name": "HumanEval/94", "prompt_type": "prompt", "index": 0, "response": "```python\ndef add_numbers(a, b):\n    return a + b\n\ndef subtract_numbers(a, b):\n    return a - b\n\ndef multiply_numbers(a, b):\n    return a * b\n\ndef divide_numbers(a, b):\n    if b == 0:\n        return \"Error: Division by zero\"\n    else:\n        return a / b\n```", "answer": "", "question_quality": "0", "code": ""}
{"key": "HumanEval/95_prompt", "name": "HumanEval/95", "prompt_type": "prompt", "index": 0, "response": "```python\ndef fibonacci(n):\n    if n <= 0:\n        return []\n    elif n == 1:\n        return [0]\n    elif n == 2:\n        return [0, 1]\n    else:\n        fib_sequence = [0, 1]\n        for i in range(2, n):\n            fib_sequence.append(fib_sequence[i-1] + fib_sequence[i-2])\n        return fib_sequence\n\nn = 10\nprint(fibonacci(n))\n```", "answer": "", "question_quality": "0", "code": ""}
{"key": "HumanEval/96_prompt", "name": "HumanEval/96", "prompt_type": "prompt", "index": 0, "response": "### Problem:\nWrite a Python function that takes in two strings and returns True if the two strings are anagrams of each other, and False otherwise. An anagram is a word or phrase formed by rearranging the letters of a different word or phrase, typically using all the original letters exactly once.\n\n### Example:\nInput:\n```python\nstr1 = \"listen\"\nstr2 = \"silent\"\n```\nOutput:\n```python\nTrue\n```\n\nInput:\n```python\nstr1 = \"hello\"\nstr2 = \"world\"\n```\nOutput:\n```python\nFalse\n```\n\n### Solution:\n```python\ndef check_anagrams(str1, str2):\n    return sorted(str1) == sorted(str2)\n\nstr1 = \"listen\"\nstr2 = \"silent\"\nprint(check_anagrams(str1, str2))  # Output: True\n\nstr1 = \"hello\"\nstr2 = \"world\"\nprint(check_anagrams(str1, str2))  # Output: False\n```", "answer": "", "question_quality": "0", "code": ""}
{"key": "HumanEval/97_prompt", "name": "HumanEval/97", "prompt_type": "prompt", "index": 0, "response": "Here is the Python3 code:\n\n```python\ndef find_average(nums):\n    if not nums:\n        return 0\n    return sum(nums) / len(nums)\n\n# Sample usage\nnumbers = [10, 20, 30, 40, 50]\naverage = find_average(numbers)\nprint(f\"The average of the numbers is: {average}\")\n```", "answer": "", "question_quality": "0", "code": ""}
{"key": "HumanEval/98_prompt", "name": "HumanEval/98", "prompt_type": "prompt", "index": 0, "response": "```python\nclass SoftwareDeveloper:\n    def __init__(self, expertise):\n        self.expertise = expertise\n\n    def write_high_quality_code(self):\n        # Write high quality code here\n        pass\n\nexpert_developer = SoftwareDeveloper(\"Software Development\")\nexpert_developer.write_high_quality_code()\n```", "answer": "", "question_quality": "0", "code": ""}
{"key": "HumanEval/99_prompt", "name": "HumanEval/99", "prompt_type": "prompt", "index": 0, "response": "```python\nclass SoftwareDeveloper:\n    def __init__(self, name, expertise):\n        self.name = name\n        self.expertise = expertise\n    \n    def write_high_quality_code(self):\n        # Write high quality code here\n        pass\n\n# Create an instance of a SoftwareDeveloper\ndeveloper = SoftwareDeveloper(\"John Doe\", \"Python\")\n\n# Call the method to write high quality code\ndeveloper.write_high_quality_code()\n```", "answer": "", "question_quality": "0", "code": ""}
{"key": "HumanEval/100_prompt", "name": "HumanEval/100", "prompt_type": "prompt", "index": 0, "response": "```python\ndef calculate_average(numbers):\n    if not numbers:\n        return 0\n    total = sum(numbers)\n    return total / len(numbers)\n\nnumbers = [5, 10, 15, 20]\naverage = calculate_average(numbers)\nprint(f\"The average of the numbers is: {average}\")\n```", "answer": "", "question_quality": "0", "code": ""}
{"key": "HumanEval/101_prompt", "name": "HumanEval/101", "prompt_type": "prompt", "index": 0, "response": "```python\ndef calculate_average(numbers):\n    if not numbers:\n        return 0\n    return sum(numbers) / len(numbers)\n\nnumbers = [2, 5, 8, 10]\naverage = calculate_average(numbers)\nprint(\"The average is:\", average)\n```", "answer": "", "question_quality": "0", "code": ""}
{"key": "HumanEval/102_prompt", "name": "HumanEval/102", "prompt_type": "prompt", "index": 0, "response": "```python\nclass SoftwareDeveloper:\n    def __init__(self, name, expertise):\n        self.name = name\n        self.expertise = expertise\n\n    def write_high_quality_code(self):\n        print(f\"{self.name} is an expert software developer who writes high quality code\")\n\n# Create an instance of SoftwareDeveloper\ndeveloper = SoftwareDeveloper(\"John Doe\", \"Python\")\n\n# Call the method to write high quality code\ndeveloper.write_high_quality_code()\n```", "answer": "", "question_quality": "0", "code": ""}
{"key": "HumanEval/103_prompt", "name": "HumanEval/103", "prompt_type": "prompt", "index": 0, "response": "```python\ndef calculate_average(numbers):\n    sum_num = sum(numbers)\n    average = sum_num / len(numbers)\n    return average\n\nif __name__ == '__main__':\n    numbers = [10, 20, 30, 40, 50]\n    avg_result = calculate_average(numbers)\n    print(\"Average of the numbers is:\", avg_result)\n```", "answer": "", "question_quality": "0", "code": ""}
{"key": "HumanEval/104_prompt", "name": "HumanEval/104", "prompt_type": "prompt", "index": 0, "response": "Variables:\n- Name: John Doe\n- Age: 30\n- Location: New York\n\n```python\n# Define variables\nname = \"John Doe\"\nage = 30\nlocation = \"New York\"\n```", "answer": "", "question_quality": "0", "code": ""}
{"key": "HumanEval/105_prompt", "name": "HumanEval/105", "prompt_type": "prompt", "index": 0, "response": "```python\ndef is_prime(n):\n    if n <= 1:\n        return False\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n```", "answer": "", "question_quality": "0", "code": ""}
{"key": "HumanEval/106_prompt", "name": "HumanEval/106", "prompt_type": "prompt", "index": 0, "response": "```python\ndef prime_check(num):\n    if num <= 1:\n        return False\n    if num <= 3:\n        return True\n    if num % 2 == 0 or num % 3 == 0:\n        return False\n    i = 5\n    while i * i <= num:\n        if num % i == 0 or num % (i + 2) == 0:\n            return False\n        i += 6\n    return True\n\n# Example usage\nnum = 23\nif prime_check(num):\n    print(f\"{num} is a prime number\")\nelse:\n    print(f\"{num} is not a prime number\")\n```", "answer": "", "question_quality": "0", "code": ""}
{"key": "HumanEval/107_prompt", "name": "HumanEval/107", "prompt_type": "prompt", "index": 0, "response": "# Python3 code\n```python\nclass SoftwareDeveloper:\n    def __init__(self, name, expertise):\n        self.name = name\n        self.expertise = expertise\n    \n    def write_high_quality_code(self):\n        print(f\"{self.name} writes high quality code in {self.expertise}.\")\n\n# Instantiate a SoftwareDeveloper object\ndeveloper = SoftwareDeveloper(\"John Doe\", \"Python\")\n\n# Call the write_high_quality_code method\ndeveloper.write_high_quality_code()\n```", "answer": "", "question_quality": "0", "code": ""}
{"key": "HumanEval/108_prompt", "name": "HumanEval/108", "prompt_type": "prompt", "index": 0, "response": "```python\ndef sum_of_squares(n):\n    return sum(i**2 for i in range(1, n+1))\n\nn = 5\nresult = sum_of_squares(n)\nprint(result)\n```", "answer": "", "question_quality": "0", "code": ""}
{"key": "HumanEval/109_prompt", "name": "HumanEval/109", "prompt_type": "prompt", "index": 0, "response": "Number of students = 5  \nGrades = [85, 90, 88, 75, 95]  \n\nCalculate the average grade of the students.", "answer": "", "question_quality": "0", "code": ""}
{"key": "HumanEval/110_prompt", "name": "HumanEval/110", "prompt_type": "prompt", "index": 0, "response": "```python\ndef calculate_average(nums):\n    total = sum(nums)\n    return total / len(nums)\n\nnumbers = [10, 20, 30, 40, 50]\naverage = calculate_average(numbers)\nprint(\"Average is:\", average)\n```", "answer": "", "question_quality": "0", "code": ""}
{"key": "HumanEval/111_prompt", "name": "HumanEval/111", "prompt_type": "prompt", "index": 0, "response": "```python\ndef is_prime(num):\n    if num < 2:\n        return False\n    for i in range(2, int(num**0.5) + 1):\n        if num % i == 0:\n            return False\n    return True\n\ndef generate_prime_numbers(n):\n    prime_numbers = []\n    current_num = 2\n    while len(prime_numbers) < n:\n        if is_prime(current_num):\n            prime_numbers.append(current_num)\n        current_num += 1\n    return prime_numbers\n\nn = 10\nprime_numbers = generate_prime_numbers(n)\nprint(prime_numbers)\n```", "answer": "", "question_quality": "0", "code": ""}
{"key": "HumanEval/112_prompt", "name": "HumanEval/112", "prompt_type": "prompt", "index": 0, "response": "Given the information provided, I am unable to generate Python3 code.", "answer": "", "question_quality": "0", "code": ""}
{"key": "HumanEval/113_prompt", "name": "HumanEval/113", "prompt_type": "prompt", "index": 0, "response": "```python\ndef is_prime(num):\n    if num < 2:\n        return False\n    for i in range(2, int(num ** 0.5) + 1):\n        if num % i == 0:\n            return False\n    return True\n\ndef generate_primes(n):\n    primes = []\n    num = 2\n    while len(primes) < n:\n        if is_prime(num):\n            primes.append(num)\n        num += 1\n    return primes\n\nn = 10\nprime_numbers = generate_primes(n)\nprint(prime_numbers)\n```", "answer": "", "question_quality": "0", "code": ""}
{"key": "HumanEval/114_prompt", "name": "HumanEval/114", "prompt_type": "prompt", "index": 0, "response": "```python\ndef calculate_average(numbers):\n    if not numbers:\n        return None\n    return sum(numbers) / len(numbers)\n\nnumbers = [10, 20, 30, 40, 50]\naverage = calculate_average(numbers)\nprint(f\"The average of the numbers is: {average}\")\n```", "answer": "", "question_quality": "0", "code": ""}
{"key": "HumanEval/115_prompt", "name": "HumanEval/115", "prompt_type": "prompt", "index": 0, "response": "```python\ndef calculate_sum(num1, num2):\n    return num1 + num2\n\nnum1 = 10\nnum2 = 5\nresult = calculate_sum(num1, num2)\nprint(f\"The sum of {num1} and {num2} is: {result}\")\n```", "answer": "", "question_quality": "0", "code": ""}
{"key": "HumanEval/116_prompt", "name": "HumanEval/116", "prompt_type": "prompt", "index": 0, "response": "```python\ndef check_palindrome(string):\n    return string == string[::-1]\n\ndef main():\n    input_string = \"radar\"\n    \n    if check_palindrome(input_string):\n        print(f\"{input_string} is a palindrome\")\n    else:\n        print(f\"{input_string} is not a palindrome\")\n\nif __name__ == \"__main__\":\n    main()\n```", "answer": "", "question_quality": "0", "code": ""}
{"key": "HumanEval/117_prompt", "name": "HumanEval/117", "prompt_type": "prompt", "index": 0, "response": "```python\ndef greet(name):\n    return f\"Hello, {name}! Welcome to the world of software development.\"\n\ndef calculate_sum(a, b):\n    return a + b\n\ndef calculate_average(numbers):\n    return sum(numbers) / len(numbers)\n```\n", "answer": "", "question_quality": "0", "code": ""}
{"key": "HumanEval/118_prompt", "name": "HumanEval/118", "prompt_type": "prompt", "index": 0, "response": "### Information:\n- Programming language: Python3\n- Task: Create a function that calculates the factorial of a given number\n\n### Code:\n```python\ndef factorial(n):\n    if n == 0:\n        return 1\n    else:\n        return n * factorial(n-1)\n\n# Test the function\nnumber = 5\nresult = factorial(number)\nprint(f\"The factorial of {number} is: {result}\")\n```", "answer": "", "question_quality": "0", "code": ""}
{"key": "HumanEval/119_prompt", "name": "HumanEval/119", "prompt_type": "prompt", "index": 0, "response": "```python\ndef calculate_average(numbers):\n    total = sum(numbers)\n    count = len(numbers)\n    if count == 0:\n        return 0\n    return total / count\n\nnumbers = [10, 20, 30, 40, 50]\naverage = calculate_average(numbers)\nprint(\"The average is:\", average)\n```  ", "answer": "", "question_quality": "0", "code": ""}
{"key": "HumanEval/120_prompt", "name": "HumanEval/120", "prompt_type": "prompt", "index": 0, "response": "```python\ndef calculate_avg(numbers):\n    if not numbers:\n        return 0\n    \n    return sum(numbers) / len(numbers)\n\nnumbers = [5, 10, 15, 20, 25]\naverage = calculate_avg(numbers)\nprint(\"Average:\", average)\n```", "answer": "", "question_quality": "0", "code": ""}
{"key": "HumanEval/121_prompt", "name": "HumanEval/121", "prompt_type": "prompt", "index": 0, "response": "```python\ndef calculate_average(numbers):\n    if not numbers:\n        return None\n    total = sum(numbers)\n    return total / len(numbers)\n\nnumbers = [10, 20, 30, 40, 50]\naverage = calculate_average(numbers)\nprint(\"Average:\", average)\n```", "answer": "", "question_quality": "0", "code": ""}
{"key": "HumanEval/122_prompt", "name": "HumanEval/122", "prompt_type": "prompt", "index": 0, "response": "```python\ndef calculate_total_selling_price(products):\n    total_price = 0\n    for product in products:\n        total_price += product['unit_price'] * product['quantity']\n    return total_price\n\nproducts = [\n    {'product_id': 1, 'name': 'Laptop', 'unit_price': 1000, 'quantity': 2},\n    {'product_id': 2, 'name': 'Mouse', 'unit_price': 20, 'quantity': 5},\n    {'product_id': 3, 'name': 'Keyboard', 'unit_price': 50, 'quantity': 3}\n]\n\ntotal_price = calculate_total_selling_price(products)\nprint(f'Total selling price of all products: ${total_price}')\n```", "answer": "", "question_quality": "0", "code": ""}
{"key": "HumanEval/123_prompt", "name": "HumanEval/123", "prompt_type": "prompt", "index": 0, "response": "```python\ndef generate_hello_message(name):\n    return f\"Hello, {name}! Welcome to the world of Python programming.\"\n\nname = input(\"Enter your name: \")\nprint(generate_hello_message(name))\n```", "answer": "", "question_quality": "0", "code": ""}
{"key": "HumanEval/124_prompt", "name": "HumanEval/124", "prompt_type": "prompt", "index": 0, "response": "```python\n# Expert software developer Python3 code\n\ndef calculate_sum(num1, num2):\n    return num1 + num2\n\ndef calculate_product(num1, num2):\n    return num1 * num2\n\n# Example of using the functions\nresult_sum = calculate_sum(5, 10)\nresult_product = calculate_product(5, 10)\n\nprint(\"Sum:\", result_sum)\nprint(\"Product:\", result_product)\n```", "answer": "", "question_quality": "0", "code": ""}
{"key": "HumanEval/125_prompt", "name": "HumanEval/125", "prompt_type": "prompt", "index": 0, "response": "```python\ndef get_max_value(nums):\n    max_value = float('-inf')\n    for num in nums:\n        if num > max_value:\n            max_value = num\n    return max_value\n\nnumbers = [3, 8, 1, 10, 5]\nprint(get_max_value(numbers))\n```", "answer": "", "question_quality": "0", "code": ""}
{"key": "HumanEval/126_prompt", "name": "HumanEval/126", "prompt_type": "prompt", "index": 0, "response": "Sure, I'd be happy to help. Please provide me with the necessary information in order for me to generate the Python3 code for you.", "answer": "", "question_quality": "0", "code": ""}
{"key": "HumanEval/127_prompt", "name": "HumanEval/127", "prompt_type": "prompt", "index": 0, "response": "```python\ndef calculate_average(numbers):\n    total = sum(numbers)\n    average = total / len(numbers)\n    return average\n\nnumbers = [85, 90, 89, 92, 88]\naverage = calculate_average(numbers)\nprint(\"The average of the numbers is:\", average)\n```", "answer": "", "question_quality": "0", "code": ""}
{"key": "HumanEval/128_prompt", "name": "HumanEval/128", "prompt_type": "prompt", "index": 0, "response": "```python\ndef calculate_average(nums):\n    if not nums:\n        return 0\n    return sum(nums) / len(nums)\n\ndef main():\n    numbers = [2, 4, 6, 8, 10]\n    avg = calculate_average(numbers)\n    print(f\"The average of the numbers is: {avg}\")\n\nif __name__ == \"__main__\":\n    main()\n```", "answer": "", "question_quality": "0", "code": ""}
{"key": "HumanEval/129_prompt", "name": "HumanEval/129", "prompt_type": "prompt", "index": 0, "response": "Given information:\n- A list of numbers: [5, 10, 15, 20, 25]\n- A target sum: 30\n\n```python\ndef find_numbers_with_sum(numbers, target_sum):\n    for i in range(len(numbers)):\n        for j in range(i+1, len(numbers)):\n            if numbers[i] + numbers[j] == target_sum:\n                return numbers[i], numbers[j]\n    return None\n\nnumbers = [5, 10, 15, 20, 25]\ntarget_sum = 30\nresult = find_numbers_with_sum(numbers, target_sum)\n\nif result:\n    print(f\"Numbers with sum {target_sum} are: {result[0]} and {result[1]}\")\nelse:\n    print(\"No numbers found with the given target sum.\")\n```", "answer": "", "question_quality": "0", "code": ""}
{"key": "HumanEval/130_prompt", "name": "HumanEval/130", "prompt_type": "prompt", "index": 0, "response": "```python\ndef calculate_profit(revenue, costs):\n    try:\n        profit = revenue - costs\n        return profit\n    except Exception as e:\n        print(f\"Error calculating profit: {e}\")\n\nrevenue = 10000\ncosts = 5000\n\nprofit = calculate_profit(revenue, costs)\nprint(f\"The profit is: {profit}\")\n```", "answer": "", "question_quality": "0", "code": ""}
{"key": "HumanEval/131_prompt", "name": "HumanEval/131", "prompt_type": "prompt", "index": 0, "response": "Sure, I'd be happy to help! Please provide me with the information you mentioned so I can generate the Python3 code for you.", "answer": "", "question_quality": "0", "code": ""}
{"key": "HumanEval/132_prompt", "name": "HumanEval/132", "prompt_type": "prompt", "index": 0, "response": "```python\nclass SoftwareDeveloper:\n    def __init__(self, name, expertise):\n        self.name = name\n        self.expertise = expertise\n\n    def write_high_quality_code(self):\n        # code for writing high quality code goes here\n        pass\n\n# Usage example\ndeveloper = SoftwareDeveloper(\"John Doe\", \"Python\")\ndeveloper.write_high_quality_code()\n```", "answer": "", "question_quality": "0", "code": ""}
{"key": "HumanEval/133_prompt", "name": "HumanEval/133", "prompt_type": "prompt", "index": 0, "response": "```python\ndef generate_acronym(phrase):\n    words = phrase.split()\n    acronym = ''.join(word[0].upper() for word in words)\n    return acronym\n\n# Example usage\nphrase = \"artificial intelligence\"\nacronym = generate_acronym(phrase)\nprint(acronym)\n```", "answer": "", "question_quality": "0", "code": ""}
{"key": "HumanEval/134_prompt", "name": "HumanEval/134", "prompt_type": "prompt", "index": 0, "response": "```python\ndef calculate_total_hours_worked(logs):\n    total_hours = 0\n    for log in logs:\n        start_time = log[0]\n        end_time = log[1]\n        total_hours += (end_time - start_time).total_seconds() / 3600\n    return total_hours\n\nlogs = [(datetime(2021, 8, 15, 9, 0), datetime(2021, 8, 15, 17, 0)),\n        (datetime(2021, 8, 16, 8, 30), datetime(2021, 8, 16, 16, 0)),\n        (datetime(2021, 8, 17, 10, 0), datetime(2021, 8, 17, 18, 30))]\n\ntotal_hours_worked = calculate_total_hours_worked(logs)\nprint(f\"Total hours worked: {total_hours_worked}\")\n```", "answer": "", "question_quality": "0", "code": ""}
{"key": "HumanEval/135_prompt", "name": "HumanEval/135", "prompt_type": "prompt", "index": 0, "response": "```python\nclass SoftwareDeveloper:\n\n    def __init__(self, name, expertise):\n        self.name = name\n        self.expertise = expertise\n\n    def write_high_quality_code(self):\n        # Write high quality code here\n        pass\n\nif __name__ == \"__main__\":\n    developer = SoftwareDeveloper(\"John\", \"Python\")\n    developer.write_high_quality_code()\n```", "answer": "", "question_quality": "0", "code": ""}
{"key": "HumanEval/136_prompt", "name": "HumanEval/136", "prompt_type": "prompt", "index": 0, "response": "```python\ndef is_prime(num):\n    if num <= 1:\n        return False\n    for i in range(2, int(num ** 0.5) + 1):\n        if num % i == 0:\n            return False\n    return True\n\nif __name__ == \"__main__\":\n    num = 17\n    if is_prime(num):\n        print(f\"{num} is a prime number\")\n    else:\n        print(f\"{num} is not a prime number\")\n```", "answer": "", "question_quality": "0", "code": ""}
{"key": "HumanEval/137_prompt", "name": "HumanEval/137", "prompt_type": "prompt", "index": 0, "response": "```python\ndef is_prime(n):\n    if n <= 1:\n        return False\n    if n <= 3:\n        return True\n    if n % 2 == 0 or n % 3 == 0:\n        return False\n\n    i = 5\n    while i * i <= n:\n        if n % i == 0 or n % (i + 2) == 0:\n            return False\n        i += 6\n\n    return True\n```", "answer": "", "question_quality": "0", "code": ""}
{"key": "HumanEval/138_prompt", "name": "HumanEval/138", "prompt_type": "prompt", "index": 0, "response": "Sure, I can help with that. Could you please provide me with the specific information or requirements for the Python3 code you would like me to generate?", "answer": "", "question_quality": "0", "code": ""}
{"key": "HumanEval/139_prompt", "name": "HumanEval/139", "prompt_type": "prompt", "index": 0, "response": "```python\ndef calculate_average(numbers):\n    if not numbers:\n        return 0\n    return sum(numbers) / len(numbers)\n\nnumbers = [1, 2, 3, 4, 5]\naverage = calculate_average(numbers)\nprint(\"Average:\", average)\n```", "answer": "", "question_quality": "0", "code": ""}
{"key": "HumanEval/140_prompt", "name": "HumanEval/140", "prompt_type": "prompt", "index": 0, "response": "```python\ndef calculate_average(numbers):\n    if not numbers:\n        return None\n    else:\n        return sum(numbers) / len(numbers)\n    \nnumbers = [3, 5, 7, 9, 11]\naverage = calculate_average(numbers)\nprint(\"The average of the numbers is:\", average)\n```", "answer": "", "question_quality": "0", "code": ""}
{"key": "HumanEval/141_prompt", "name": "HumanEval/141", "prompt_type": "prompt", "index": 0, "response": "```python\ndef calculate_average(numbers):\n    if not numbers:\n        return 0\n    return sum(numbers) / len(numbers)\n\nif __name__ == \"__main__\":\n    numbers = [2, 4, 6, 8, 10]\n    average = calculate_average(numbers)\n    print(f\"The average of the numbers {numbers} is: {average}\")\n```", "answer": "", "question_quality": "0", "code": ""}
{"key": "HumanEval/142_prompt", "name": "HumanEval/142", "prompt_type": "prompt", "index": 0, "response": "```python\ndef calculate_average(numbers):\n    total = sum(numbers)\n    average = total / len(numbers)\n    return average\n\nnumbers = [10, 20, 30, 40, 50]\naverage = calculate_average(numbers)\nprint(f\"The average of the numbers is: {average}\")\n```", "answer": "", "question_quality": "0", "code": ""}
{"key": "HumanEval/143_prompt", "name": "HumanEval/143", "prompt_type": "prompt", "index": 0, "response": "```python\ndef calculate_total_distance(speed, time):\n    return speed * time\n\nspeed = 50 # in km/h\ntime = 2.5 # in hours\n\ntotal_distance = calculate_total_distance(speed, time)\nprint(\"The total distance covered in\", time, \"hours at a speed of\", speed, \"km/h is\", total_distance, \"km.\")\n```", "answer": "", "question_quality": "0", "code": ""}
{"key": "HumanEval/144_prompt", "name": "HumanEval/144", "prompt_type": "prompt", "index": 0, "response": "### Problem:\nYou are given a list of integers and you need to write a function to return the sum of all positive numbers in the list.\n\n### Input:\n- A list of integers\n\n### Output:\n- Return the sum of all positive numbers in the list\n\n### Example:\n- Input: [1, -2, 3, -4, 5]\n- Output: 9", "answer": "", "question_quality": "0", "code": ""}
{"key": "HumanEval/145_prompt", "name": "HumanEval/145", "prompt_type": "prompt", "index": 0, "response": "Sure, I'd be happy to help. Please provide me with the required information or specific problem statement for which you need Python code.", "answer": "", "question_quality": "0", "code": ""}
{"key": "HumanEval/146_prompt", "name": "HumanEval/146", "prompt_type": "prompt", "index": 0, "response": "```python\ndef calculate_average(numbers):\n    if len(numbers) == 0:\n        return 0\n    return sum(numbers) / len(numbers)\n\nnumbers = [10, 20, 30, 40, 50]\naverage = calculate_average(numbers)\nprint(\"The average of the numbers is:\", average)\n```", "answer": "", "question_quality": "0", "code": ""}
{"key": "HumanEval/147_prompt", "name": "HumanEval/147", "prompt_type": "prompt", "index": 0, "response": "```python\ndef is_prime(num):\n    if num < 2:\n        return False\n    for i in range(2, int(num ** 0.5) + 1):\n        if num % i == 0:\n            return False\n    return True\n```", "answer": "", "question_quality": "0", "code": ""}
{"key": "HumanEval/148_prompt", "name": "HumanEval/148", "prompt_type": "prompt", "index": 0, "response": "```python\ndef calculate_sum(num_array):\n    total = 0\n    for num in num_array:\n        total += num\n    return total\n\nnumbers = [5, 10, 15, 20, 25]\nsum_result = calculate_sum(numbers)\nprint(\"The sum of the numbers is: \", sum_result)\n```", "answer": "", "question_quality": "0", "code": ""}
{"key": "HumanEval/149_prompt", "name": "HumanEval/149", "prompt_type": "prompt", "index": 0, "response": "```python\nclass SoftwareDeveloper:\n    def __init__(self, name, experience, skills):\n        self.name = name\n        self.experience = experience\n        self.skills = skills\n\n    def write_high_quality_code(self):\n        # Write high quality code here\n        pass\n\n# Example usage\ndeveloper1 = SoftwareDeveloper(\"John\", 5, [\"Python\", \"Java\", \"C++\"])\ndeveloper1.write_high_quality_code()\n```", "answer": "", "question_quality": "0", "code": ""}
{"key": "HumanEval/150_prompt", "name": "HumanEval/150", "prompt_type": "prompt", "index": 0, "response": "```python\nclass SoftwareDeveloper:\n    def __init__(self, name, experience_years):\n        self.name = name\n        self.experience_years = experience_years\n\n    def write_high_quality_code(self):\n        # Write high quality code here\n        pass\n\n# Example usage\nexpert_developer = SoftwareDeveloper(\"John Doe\", 10)\nexpert_developer.write_high_quality_code()\n```", "answer": "", "question_quality": "0", "code": ""}
{"key": "HumanEval/151_prompt", "name": "HumanEval/151", "prompt_type": "prompt", "index": 0, "response": "- Create a function named \"calculate_bonus\" that takes two parameters: salary (int) and performance_rating (int)\n- The function should calculate the bonus based on the performance_rating as follows:\n  - If performance_rating is 1, the bonus should be 10% of the salary\n  - If performance_rating is 2, the bonus should be 5% of the salary\n  - If performance_rating is 3, the bonus should be 2% of the salary\n  - If performance_rating is not 1, 2, or 3, there should be no bonus\n- Return the calculated bonus\n\n```python\ndef calculate_bonus(salary, performance_rating):\n    if performance_rating == 1:\n        bonus = salary * 0.10\n    elif performance_rating == 2:\n        bonus = salary * 0.05\n    elif performance_rating == 3:\n        bonus = salary * 0.02\n    else:\n        bonus = 0\n    \n    return bonus\n\n# Example usage\nsalary = 50000\nperformance_rating = 2\nbonus = calculate_bonus(salary, performance_rating)\nprint(f\"The bonus for performance rating {performance_rating} is ${bonus}\")\n```", "answer": "", "question_quality": "0", "code": ""}
{"key": "HumanEval/152_prompt", "name": "HumanEval/152", "prompt_type": "prompt", "index": 0, "response": "```python\ndef calculate_avg(numbers):\n    total = sum(numbers)\n    return total/len(numbers)\n\nnumbers = [5, 10, 15, 20, 25]\naverage = calculate_avg(numbers)\nprint(\"The average of the numbers is:\", average)\n```", "answer": "", "question_quality": "0", "code": ""}
{"key": "HumanEval/153_prompt", "name": "HumanEval/153", "prompt_type": "prompt", "index": 0, "response": "```python\ndef calculate_average(numbers):\n    total = sum(numbers)\n    average = total / len(numbers)\n    return average\n\nnumbers = [5, 10, 15, 20, 25]\nresult = calculate_average(numbers)\nprint(\"The average of the numbers is:\", result)\n```", "answer": "", "question_quality": "0", "code": ""}
{"key": "HumanEval/154_prompt", "name": "HumanEval/154", "prompt_type": "prompt", "index": 0, "response": "```python\ndef generate_random_numbers(n):\n    import random\n    random_numbers = [random.randint(1, 100) for _ in range(n)]\n    return random_numbers\n\nn = 10\nrandom_numbers = generate_random_numbers(n)\nprint(random_numbers)\n```", "answer": "", "question_quality": "0", "code": ""}
{"key": "HumanEval/155_prompt", "name": "HumanEval/155", "prompt_type": "prompt", "index": 0, "response": "```python\ndef calculate_average(numbers):\n    sum = 0\n    for number in numbers:\n        sum += number\n    return sum / len(numbers)\n\nnumbers = [23, 45, 67, 89, 12]\naverage = calculate_average(numbers)\nprint(\"The average is:\", average)\n```", "answer": "", "question_quality": "0", "code": ""}
{"key": "HumanEval/156_prompt", "name": "HumanEval/156", "prompt_type": "prompt", "index": 0, "response": "```python\nclass SoftwareDeveloper:\n    def __init__(self, name, expertise):\n        self.name = name\n        self.expertise = expertise\n    \n    def write_high_quality_code(self):\n        print(f\"{self.name} is an expert software developer who writes high quality {self.expertise} code\")\n\n# Example usage\ndeveloper = SoftwareDeveloper(\"Alice\", \"Python\")\ndeveloper.write_high_quality_code()\n```", "answer": "", "question_quality": "0", "code": ""}
{"key": "HumanEval/157_prompt", "name": "HumanEval/157", "prompt_type": "prompt", "index": 0, "response": "```python\ndef calculate_fibonacci(n):\n    if n <= 0:\n        return \"Please enter a positive integer\"\n\n    fibonacci_sequence = [0, 1]\n    for i in range(2, n):\n        next_fib = fibonacci_sequence[-1] + fibonacci_sequence[-2]\n        fibonacci_sequence.append(next_fib)\n\n    return fibonacci_sequence\n\nn = 10\nprint(calculate_fibonacci(n))\n```", "answer": "", "question_quality": "0", "code": ""}
{"key": "HumanEval/158_prompt", "name": "HumanEval/158", "prompt_type": "prompt", "index": 0, "response": "```python\ndef calculate_sum(numbers):\n    total = 0\n    for num in numbers:\n        total += num\n    return total\n\nnumbers = [1, 2, 3, 4, 5]\nresult = calculate_sum(numbers)\nprint(\"The sum of the numbers is:\", result)\n```", "answer": "", "question_quality": "0", "code": ""}
{"key": "HumanEval/159_prompt", "name": "HumanEval/159", "prompt_type": "prompt", "index": 0, "response": "```python\ndef calculate_average(numbers):\n    if len(numbers) == 0:\n        return 0\n    else:\n        return sum(numbers) / len(numbers)\n\n# Example usage\nnumbers = [5, 10, 15, 20]\naverage = calculate_average(numbers)\nprint(\"The average is:\", average)\n```", "answer": "", "question_quality": "0", "code": ""}
{"key": "HumanEval/160_prompt", "name": "HumanEval/160", "prompt_type": "prompt", "index": 0, "response": "```python\ndef is_prime(num):\n    if num < 2:\n        return False\n    for i in range(2, int(num ** 0.5) + 1):\n        if num % i == 0:\n            return False\n    return True\n\ndef generate_primes(n):\n    primes = []\n    num = 2\n    while len(primes) < n:\n        if is_prime(num):\n            primes.append(num)\n        num += 1\n    return primes\n\nn = 10\nprint(generate_primes(n))\n```", "answer": "", "question_quality": "0", "code": ""}
{"key": "HumanEval/161_prompt", "name": "HumanEval/161", "prompt_type": "prompt", "index": 0, "response": "```python\ndef fibonacci(n):\n    if n <= 0:\n        return \"Please enter a positive integer\"\n    elif n == 1:\n        return 0\n    elif n == 2:\n        return 1\n    else:\n        a, b = 0, 1\n        for _ in range(2, n):\n            a, b = b, a + b\n        return b\n\nn = 10\nresult = fibonacci(n)\nprint(result)\n```", "answer": "", "question_quality": "0", "code": ""}
{"key": "HumanEval/162_prompt", "name": "HumanEval/162", "prompt_type": "prompt", "index": 0, "response": "Sure, please provide me with the information you would like me to use for generating the Python3 code.", "answer": "", "question_quality": "0", "code": ""}
{"key": "HumanEval/163_prompt", "name": "HumanEval/163", "prompt_type": "prompt", "index": 0, "response": "```python\ndef calculate_sum(numbers):\n    if not numbers:\n        return 0\n    total = sum(numbers)\n    return total\n\nnumbers = [1, 2, 3, 4, 5]\nresult = calculate_sum(numbers)\nprint(result)\n```", "answer": "", "question_quality": "0", "code": ""}
