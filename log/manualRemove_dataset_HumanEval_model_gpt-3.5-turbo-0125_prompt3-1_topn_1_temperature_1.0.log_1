{"key": "HumanEval/1_prompt", "name": "HumanEval/1", "prompt_type": "prompt", "index": 0, "response": "```python\ndef calculate_average(nums):\n    if len(nums) == 0:\n        return 0\n    \n    total = sum(nums)\n    average = total / len(nums)\n    \n    return average\n\nnumbers = [5, 10, 15, 20, 25]\nresult = calculate_average(numbers)\nprint(\"The average is:\", result)\n```", "answer": "", "question_quality": "0", "code": ""}
{"key": "HumanEval/2_prompt", "name": "HumanEval/2", "prompt_type": "prompt", "index": 0, "response": "Sure, please provide the information needed for me to generate the Python code.", "answer": "", "question_quality": "0", "code": ""}
{"key": "HumanEval/3_prompt", "name": "HumanEval/3", "prompt_type": "prompt", "index": 0, "response": "Sure, please provide me with the information that you have and I will generate the Python3 code for you.", "answer": "", "question_quality": "0", "code": ""}
{"key": "HumanEval/4_prompt", "name": "HumanEval/4", "prompt_type": "prompt", "index": 0, "response": "```python\nclass ExpertSoftwareDeveloper:\n    def __init__(self, name, expertise):\n        self.name = name\n        self.expertise = expertise\n\n    def write_high_quality_code(self):\n        print(f\"{self.name} writes high quality code in {self.expertise}.\")\n\n# Example of creating an instance of ExpertSoftwareDeveloper\ndeveloper = ExpertSoftwareDeveloper(\"Alice\", \"Python\")\ndeveloper.write_high_quality_code()\n```  ", "answer": "", "question_quality": "0", "code": ""}
{"key": "HumanEval/5_prompt", "name": "HumanEval/5", "prompt_type": "prompt", "index": 0, "response": "```python\nclass SoftwareDeveloper:\n    def __init__(self, name, experience):\n        self.name = name\n        self.experience = experience\n\n    def write_high_quality_code(self):\n        # Write high quality code here\n        pass\n\n# Instantiate the SoftwareDeveloper class\nexpert_developer = SoftwareDeveloper(\"John Doe\", \"10 years\")\n\n# Write high quality code\nexpert_developer.write_high_quality_code()\n```", "answer": "", "question_quality": "0", "code": ""}
{"key": "HumanEval/6_prompt", "name": "HumanEval/6", "prompt_type": "prompt", "index": 0, "response": "Sure, please provide the below information that you mentioned for me to generate Python3 code.", "answer": "", "question_quality": "0", "code": ""}
{"key": "HumanEval/7_prompt", "name": "HumanEval/7", "prompt_type": "prompt", "index": 0, "response": "```python\ndef calculate_sum_of_list_elements(lst):\n    return sum(lst)\n\nnumbers = [1, 2, 3, 4, 5]\ntotal_sum = calculate_sum_of_list_elements(numbers)\nprint(\"The total sum of the list elements is:\", total_sum)\n```", "answer": "", "question_quality": "0", "code": ""}
{"key": "HumanEval/8_prompt", "name": "HumanEval/8", "prompt_type": "prompt", "index": 0, "response": "```python\n# Define a function to determine if a given number is a prime number\ndef is_prime(num):\n    if num < 2:\n        return False\n    for i in range(2, int(num**0.5) + 1):\n        if num % i == 0:\n            return False\n    return True\n\n# Test the function with a sample number\nnum = 17\nif is_prime(num):\n    print(f\"{num} is a prime number\")\nelse:\n    print(f\"{num} is not a prime number\")\n```", "answer": "", "question_quality": "0", "code": ""}
{"key": "HumanEval/9_prompt", "name": "HumanEval/9", "prompt_type": "prompt", "index": 0, "response": "Sure! Please provide me with the information you have so I can generate the Python3 code accordingly.", "answer": "", "question_quality": "0", "code": ""}
{"key": "HumanEval/10_prompt", "name": "HumanEval/10", "prompt_type": "prompt", "index": 0, "response": "Sure, I'd be happy to help! What specific information would you like me to generate Python3 code for?", "answer": "", "question_quality": "0", "code": ""}
{"key": "HumanEval/11_prompt", "name": "HumanEval/11", "prompt_type": "prompt", "index": 0, "response": "```python\nclass SoftwareDeveloper:\n    def __init__(self, name, expertise):\n        self.name = name \n        self.expertise = expertise\n\n    def write_high_quality_code(self):\n        print(f\"{self.name} writes high quality code.\")\n```\n", "answer": "", "question_quality": "0", "code": ""}
{"key": "HumanEval/12_prompt", "name": "HumanEval/12", "prompt_type": "prompt", "index": 0, "response": "**Information:**\n\n1. Create a function called `calculate_sum` that takes in a list of numbers as a parameter.\n2. The function should calculate the sum of all the numbers in the list.\n3. Return the sum of the numbers as the output.\n\n**Input:**\n\n```python\nnumbers = [1, 2, 3, 4, 5]\n```\n\n**Expected Output:**\n\n```python\n15", "answer": "", "question_quality": "0", "code": ""}
{"key": "HumanEval/13_prompt", "name": "HumanEval/13", "prompt_type": "prompt", "index": 0, "response": "```python\ndef calculate_average(numbers):\n    if not numbers:\n        return 0\n    return sum(numbers) / len(numbers)\n\nnumbers = [2, 4, 6, 8, 10]\naverage = calculate_average(numbers)\nprint(f\"The average is: {average}\")\n```", "answer": "", "question_quality": "0", "code": ""}
{"key": "HumanEval/14_prompt", "name": "HumanEval/14", "prompt_type": "prompt", "index": 0, "response": "Sure, please provide me with the information needed to generate the Python3 code.", "answer": "", "question_quality": "0", "code": ""}
{"key": "HumanEval/15_prompt", "name": "HumanEval/15", "prompt_type": "prompt", "index": 0, "response": "```python\n# Define a class called ExpertDeveloper\nclass ExpertDeveloper:\n    \n    def __init__(self, name, programming_languages):\n        self.name = name\n        self.programming_languages = programming_languages\n\n    def write_high_quality_code(self):\n        print(f\"{self.name} is writing high quality code in {', '.join(self.programming_languages)}\")\n\n# Create an instance of ExpertDeveloper\nexpert1 = ExpertDeveloper(\"John Doe\", [\"Python\", \"Java\", \"JavaScript\"])\n\n# Call the method to write high quality code\nexpert1.write_high_quality_code()\n```", "answer": "", "question_quality": "0", "code": ""}
{"key": "HumanEval/16_prompt", "name": "HumanEval/16", "prompt_type": "prompt", "index": 0, "response": "```python\ndef calculate_average(numbers):\n    sum = 0\n    count = 0\n    for number in numbers:\n        sum += number\n        count += 1\n    if count == 0:\n        return 0\n    return sum / count\n\nnumbers = [5, 10, 15, 20, 25]\naverage = calculate_average(numbers)\nprint(\"The average is:\", average)\n```", "answer": "", "question_quality": "0", "code": ""}
{"key": "HumanEval/17_prompt", "name": "HumanEval/17", "prompt_type": "prompt", "index": 0, "response": "```python\ndef generate_fibonacci_sequence(n):\n    fibonacci_sequence = [0, 1]\n    while len(fibonacci_sequence) < n:\n        next_number = fibonacci_sequence[-1] + fibonacci_sequence[-2]\n        fibonacci_sequence.append(next_number)\n    return fibonacci_sequence\n\nn = 10\nfibonacci_sequence = generate_fibonacci_sequence(n)\nprint(fibonacci_sequence)\n```", "answer": "", "question_quality": "0", "code": ""}
{"key": "HumanEval/18_prompt", "name": "HumanEval/18", "prompt_type": "prompt", "index": 0, "response": "```python\ndef calculate_average(numbers):\n    if not numbers:\n        return None\n    return sum(numbers) / len(numbers)\n\nnumbers = [12, 34, 56, 78, 90]\naverage = calculate_average(numbers)\nprint(\"Average:\", average)\n```", "answer": "", "question_quality": "0", "code": ""}
{"key": "HumanEval/19_prompt", "name": "HumanEval/19", "prompt_type": "prompt", "index": 0, "response": "Sure! I'd be happy to help. Could you please provide me with the information you mentioned to generate the Python3 code for you?", "answer": "", "question_quality": "0", "code": ""}
{"key": "HumanEval/20_prompt", "name": "HumanEval/20", "prompt_type": "prompt", "index": 0, "response": "Sure, can you please provide me with the information that needs to be included in the Python3 code?", "answer": "", "question_quality": "0", "code": ""}
{"key": "HumanEval/21_prompt", "name": "HumanEval/21", "prompt_type": "prompt", "index": 0, "response": "```python\ndef calculate_average(numbers):\n    total = sum(numbers)\n    average = total / len(numbers)\n    return average\n\nnumbers = [4, 6, 8, 10, 12]\navg = calculate_average(numbers)\nprint(\"Average:\", avg)\n```", "answer": "", "question_quality": "0", "code": ""}
{"key": "HumanEval/22_prompt", "name": "HumanEval/22", "prompt_type": "prompt", "index": 0, "response": "```python\ndef calculate_average(numbers):\n    if not numbers:\n        return None\n    total = sum(numbers)\n    return total / len(numbers)\n\nnumbers = [5, 10, 15, 20, 25]\naverage = calculate_average(numbers)\nprint(\"Average:\", average)\n```", "answer": "", "question_quality": "0", "code": ""}
{"key": "HumanEval/23_prompt", "name": "HumanEval/23", "prompt_type": "prompt", "index": 0, "response": "```python\ndef remove_duplicates(input_list):\n    unique_list = []\n    for item in input_list:\n        if item not in unique_list:\n            unique_list.append(item)\n    return unique_list\n\ninput_list = [1, 2, 3, 4, 4, 5, 6, 6, 7]\noutput_list = remove_duplicates(input_list)\nprint(output_list)\n```", "answer": "", "question_quality": "0", "code": ""}
{"key": "HumanEval/24_prompt", "name": "HumanEval/24", "prompt_type": "prompt", "index": 0, "response": "```python\ndef calculate_average(nums):\n    if not nums:\n        return 0\n    total = sum(nums)\n    average = total / len(nums)\n    return average\n\nnumbers = [3, 5, 7, 9, 11]\naverage = calculate_average(numbers)\nprint(f\"The average of the numbers is: {average}\")\n```", "answer": "", "question_quality": "0", "code": ""}
{"key": "HumanEval/25_prompt", "name": "HumanEval/25", "prompt_type": "prompt", "index": 0, "response": "```python\nclass SoftwareDeveloper:\n    def __init__(self, name, expertise):\n        self.name = name\n        self.expertise = expertise\n\n    def write_high_quality_code(self):\n        print(f\"{self.name} writes high quality code in {self.expertise}\")\n\ndeveloper1 = SoftwareDeveloper(\"John\", \"Python\")\ndeveloper1.write_high_quality_code()\n```", "answer": "", "question_quality": "0", "code": ""}
{"key": "HumanEval/26_prompt", "name": "HumanEval/26", "prompt_type": "prompt", "index": 0, "response": "Here is an example of Python3 code that generates a random number between 1 and 10:\n\n```python\nimport random\n\nrandom_number = random.randint(1, 10)\nprint(\"Random Number:\", random_number)\n```", "answer": "", "question_quality": "0", "code": ""}
{"key": "HumanEval/27_prompt", "name": "HumanEval/27", "prompt_type": "prompt", "index": 0, "response": "In order to generate Python3 code, I would need information on what specific functionality or problem you would like the code to solve. Please provide more details so I can create a code snippet for you.", "answer": "", "question_quality": "0", "code": ""}
{"key": "HumanEval/28_prompt", "name": "HumanEval/28", "prompt_type": "prompt", "index": 0, "response": "```python\ndef fibonacci(n):\n    if n <= 0:\n        return \"Invalid input\"\n\n    fib_sequence = [0, 1]\n\n    while len(fib_sequence) < n:\n        next_num = fib_sequence[-1] + fib_sequence[-2]\n        fib_sequence.append(next_num)\n\n    return fib_sequence\n\nn = 10\nresult = fibonacci(n)\nprint(result)\n```", "answer": "", "question_quality": "0", "code": ""}
{"key": "HumanEval/29_prompt", "name": "HumanEval/29", "prompt_type": "prompt", "index": 0, "response": "```python\nclass SoftwareDeveloper:\n    def __init__(self, name, years_of_experience, expertise):\n        self.name = name\n        self.years_of_experience = years_of_experience\n        self.expertise = expertise\n\n    def write_high_quality_code(self):\n        # Write high quality code here\n        pass\n\n# Instantiate a SoftwareDeveloper object\nexpert_dev = SoftwareDeveloper(\"John Doe\", 7, \"Python\")\n\n# Check if the expert_dev is an instance of SoftwareDeveloper class\nif isinstance(expert_dev, SoftwareDeveloper):\n    print(\"The expert developer is an instance of the SoftwareDeveloper class\")\n```\n", "answer": "", "question_quality": "0", "code": ""}
{"key": "HumanEval/30_prompt", "name": "HumanEval/30", "prompt_type": "prompt", "index": 0, "response": "Information:\n- You need to write a function in Python that takes a list of integers as input and returns the sum of all the integers in the list.\n- The function should be named \"calculate_sum\".\n- The function should have a parameter named \"numbers\" which will be the list of integers\n\n```python\ndef calculate_sum(numbers):\n    return sum(numbers)\n```", "answer": "", "question_quality": "0", "code": ""}
{"key": "HumanEval/31_prompt", "name": "HumanEval/31", "prompt_type": "prompt", "index": 0, "response": "### Problem:\nYou are given a list of integers `nums`. Write a Python function to return the maximum difference between any two numbers in the list.\n\n### Example:\nInput: `nums = [3, 6, 10, 1, 8]`  \nOutput: `9`  \nExplanation: The maximum difference is between `10` and `1` = `9`\n\n### Constraints:\n- The list can have between 2 and 10^6 integers.\n- Each integer in the list will be between -1000 and 1000.\n\n```python\ndef max_difference(nums):\n    min_num = nums[0]\n    max_diff = 0\n    \n    for num in nums:\n        if num - min_num > max_diff:\n            max_diff = num - min_num\n        if num < min_num:\n            min_num = num\n    \n    return max_diff\n\n# Test the function with the given example\nnums = [3, 6, 10, 1, 8]\nprint(max_difference(nums))\n```", "answer": "", "question_quality": "0", "code": ""}
{"key": "HumanEval/32_prompt", "name": "HumanEval/32", "prompt_type": "prompt", "index": 0, "response": "```python\ndef is_prime(num):\n    if num < 2:\n        return False\n    for i in range(2, int(num ** 0.5) + 1):\n        if num % i == 0:\n            return False\n    return True\n```", "answer": "", "question_quality": "0", "code": ""}
{"key": "HumanEval/33_prompt", "name": "HumanEval/33", "prompt_type": "prompt", "index": 0, "response": "```python\ndef is_prime(n):\n    if n <= 1:\n        return False\n    if n <= 3:\n        return True\n    if n % 2 == 0 or n % 3 == 0:\n        return False\n    i = 5\n    while i * i <= n:\n        if n % i == 0 or n % (i + 2) == 0:\n            return False\n        i += 6\n    return True\n\n# Testing the is_prime function\nprint(is_prime(7))  # Output: True\nprint(is_prime(12))  # Output: False\nprint(is_prime(23))  # Output: True\n```", "answer": "", "question_quality": "0", "code": ""}
{"key": "HumanEval/34_prompt", "name": "HumanEval/34", "prompt_type": "prompt", "index": 0, "response": "```python\nclass SoftwareDeveloper:\n    def __init__(self, name, expertise):\n        self.name = name\n        self.expertise = expertise\n    \n    def write_high_quality_code(self):\n        # Write high quality code here\n        pass\n\n# Example usage\ndeveloper = SoftwareDeveloper(\"John\", \"Python\")\ndeveloper.write_high_quality_code()\n```", "answer": "", "question_quality": "0", "code": ""}
{"key": "HumanEval/35_prompt", "name": "HumanEval/35", "prompt_type": "prompt", "index": 0, "response": "Sure, please provide me with the required information so I can generate the Python3 code for you.", "answer": "", "question_quality": "0", "code": ""}
{"key": "HumanEval/36_prompt", "name": "HumanEval/36", "prompt_type": "prompt", "index": 0, "response": "```python\ndef calculate_average(nums):\n    if not nums:\n        return 0\n    \n    total = sum(nums)\n    average = total / len(nums)\n    return average\n\nnumbers = [23, 45, 67, 89, 12, 32]\naverage_result = calculate_average(numbers)\nprint(\"Average:\", average_result)\n```", "answer": "", "question_quality": "0", "code": ""}
{"key": "HumanEval/37_prompt", "name": "HumanEval/37", "prompt_type": "prompt", "index": 0, "response": "```python\nclass SoftwareDeveloper:\n    def __init__(self, name, expertise):\n        self.name = name\n        self.expertise = expertise\n\n    def write_high_quality_code(self):\n        print(f\"{self.name} is writing high quality code in {self.expertise}\")\n\n# Create an instance of SoftwareDeveloper\ndeveloper = SoftwareDeveloper(\"John\", \"Python\")\n\n# Call the method to write high quality code\ndeveloper.write_high_quality_code()\n```", "answer": "", "question_quality": "0", "code": ""}
{"key": "HumanEval/38_prompt", "name": "HumanEval/38", "prompt_type": "prompt", "index": 0, "response": "```python\ndef calculate_circle_area(radius):\n    return 3.14159 * radius**2\n\nradius = 5\ncircle_area = calculate_circle_area(radius)\nprint(f\"The area of a circle with radius {radius} is {circle_area}\")\n```", "answer": "", "question_quality": "0", "code": ""}
{"key": "HumanEval/39_prompt", "name": "HumanEval/39", "prompt_type": "prompt", "index": 0, "response": "```python\ndef generate_fibonacci_sequence(n):\n    fib_sequence = [0, 1]\n    \n    for i in range(2, n):\n        next_num = fib_sequence[i-1] + fib_sequence[i-2]\n        fib_sequence.append(next_num)\n    \n    return fib_sequence\n\nn = 10\nfib_sequence = generate_fibonacci_sequence(n)\nprint(fib_sequence)\n```", "answer": "", "question_quality": "0", "code": ""}
{"key": "HumanEval/40_prompt", "name": "HumanEval/40", "prompt_type": "prompt", "index": 0, "response": "```python\nimport math\n\nclass Circle:\n    def __init__(self, radius):\n        self.radius = radius\n    \n    def area(self):\n        return math.pi * self.radius**2\n    \n    def circumference(self):\n        return 2 * math.pi * self.radius\n\n# Example usage\nc = Circle(5)\nprint(\"Area of the circle:\", c.area())\nprint(\"Circumference of the circle:\", c.circumference())\n```", "answer": "", "question_quality": "0", "code": ""}
{"key": "HumanEval/41_prompt", "name": "HumanEval/41", "prompt_type": "prompt", "index": 0, "response": "Sure! Could you please provide me with the information you mentioned that I should use to generate the Python3 code?", "answer": "", "question_quality": "0", "code": ""}
{"key": "HumanEval/42_prompt", "name": "HumanEval/42", "prompt_type": "prompt", "index": 0, "response": "Sure, please provide the specific information or problem statement that needs to be addressed in the Python3 code.", "answer": "", "question_quality": "0", "code": ""}
{"key": "HumanEval/43_prompt", "name": "HumanEval/43", "prompt_type": "prompt", "index": 0, "response": "```python\ndef find_missing_number(nums):\n    n = len(nums) + 1\n    total_sum = n * (n + 1) // 2\n    current_sum = sum(nums)\n    \n    return total_sum - current_sum\n\n# Example usage\nnums = [1, 2, 4, 5, 6]\nmissing_number = find_missing_number(nums)\nprint(f\"The missing number is: {missing_number}\")\n```", "answer": "", "question_quality": "0", "code": ""}
{"key": "HumanEval/44_prompt", "name": "HumanEval/44", "prompt_type": "prompt", "index": 0, "response": "```python\ndef calculate_sum(num1, num2):\n    return num1 + num2\n\ndef calculate_difference(num1, num2):\n    return num1 - num2\n\ndef calculate_product(num1, num2):\n    return num1 * num2\n```", "answer": "", "question_quality": "0", "code": ""}
{"key": "HumanEval/45_prompt", "name": "HumanEval/45", "prompt_type": "prompt", "index": 0, "response": "```python\ndef remove_duplicates(nums):\n    return list(set(nums))\n\nnums = [1, 2, 2, 3, 4, 4, 5]\nunique_nums = remove_duplicates(nums)\nprint(unique_nums)\n```", "answer": "", "question_quality": "0", "code": ""}
{"key": "HumanEval/46_prompt", "name": "HumanEval/46", "prompt_type": "prompt", "index": 0, "response": "```python\ndef calculate_fibonacci_sequence(n):\n    if n <= 0:\n        return \"Invalid input\"\n\n    fibonacci_sequence = [0, 1]\n    if n <= 2:\n        return fibonacci_sequence[:n]\n\n    for i in range(2, n):\n        next_number = fibonacci_sequence[i - 1] + fibonacci_sequence[i - 2]\n        fibonacci_sequence.append(next_number)\n\n    return fibonacci_sequence\n\nn = 10\nresult = calculate_fibonacci_sequence(n)\nprint(result)\n```", "answer": "", "question_quality": "0", "code": ""}
{"key": "HumanEval/47_prompt", "name": "HumanEval/47", "prompt_type": "prompt", "index": 0, "response": "```python\ndef is_prime(n):\n    if n <= 1:\n        return False\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n```", "answer": "", "question_quality": "0", "code": ""}
{"key": "HumanEval/48_prompt", "name": "HumanEval/48", "prompt_type": "prompt", "index": 0, "response": "```python\ndef convert_to_binary(num):\n    return bin(num)\n\ndef is_power_of_two(num):\n    if num <= 0:\n        return False\n    return (num & (num - 1)) == 0\n\n# Test the functions\nif __name__ == '__main__':\n    test_num = 8\n    \n    binary_rep = convert_to_binary(test_num)\n    print(f\"Binary representation of {test_num}: {binary_rep}\")\n    \n    if is_power_of_two(test_num):\n        print(f\"{test_num} is a power of two\")\n    else:\n        print(f\"{test_num} is not a power of two\")\n```\nNote: The code consists of two functions - convert_to_binary and is_power_of_two. The convert_to_binary function converts a given number to its binary representation. The is_power_of_two function checks if a given number is a power of two or not. Finally, we test these functions with a test number 8.", "answer": "", "question_quality": "0", "code": ""}
{"key": "HumanEval/49_prompt", "name": "HumanEval/49", "prompt_type": "prompt", "index": 0, "response": "```python\ndef calculate_average(numbers):\n    total = sum(numbers)\n    average = total / len(numbers)\n    return average\n\nnumbers = [85, 90, 89, 92, 88]\naverage = calculate_average(numbers)\n\nprint(f\"The average of the numbers is: {average}\")\n```", "answer": "", "question_quality": "0", "code": ""}
{"key": "HumanEval/50_prompt", "name": "HumanEval/50", "prompt_type": "prompt", "index": 0, "response": "```python\nclass SoftwareDeveloper:\n    \n    def __init__(self, name, expertise, years_of_experience):\n        self.name = name\n        self.expertise = expertise\n        self.years_of_experience = years_of_experience\n\n    def write_high_quality_code(self):\n        print(f\"{self.name} is an expert software developer with {self.years_of_experience} years of experience.\")\n        print(f\"{self.name} specializes in {self.expertise} and always writes high quality code.\")\n\n# Example usage\ndeveloper1 = SoftwareDeveloper(\"John Doe\", \"Python\", 7)\ndeveloper1.write_high_quality_code()\n```", "answer": "", "question_quality": "0", "code": ""}
{"key": "HumanEval/51_prompt", "name": "HumanEval/51", "prompt_type": "prompt", "index": 0, "response": "```python\ndef calculate_average(numbers):\n    sum = 0\n    for num in numbers:\n        sum += num\n    avg = sum / len(numbers)\n    return avg\n\nnumbers = [5, 10, 15, 20, 25]\naverage = calculate_average(numbers)\nprint(\"The average of the numbers is:\", average)\n```", "answer": "", "question_quality": "0", "code": ""}
{"key": "HumanEval/52_prompt", "name": "HumanEval/52", "prompt_type": "prompt", "index": 0, "response": "Given the following information:\n\n- You need to write a Python3 function that calculates the sum of all the numbers from 1 to n.\n- The function should take an integer n as input.\n- The function should return the sum of all the numbers from 1 to n.\n\nPlease write the Python3 code for the function: \n```python\ndef calculate_sum(n):\n    return sum(range(1, n+1))\n```", "answer": "", "question_quality": "0", "code": ""}
{"key": "HumanEval/53_prompt", "name": "HumanEval/53", "prompt_type": "prompt", "index": 0, "response": "Sure, please provide the necessary information for me to generate the Python3 code.", "answer": "", "question_quality": "0", "code": ""}
{"key": "HumanEval/54_prompt", "name": "HumanEval/54", "prompt_type": "prompt", "index": 0, "response": "```\ndef generate_password(length):\n    import random\n    import string\n    \n    letters_and_digits = string.ascii_letters + string.digits\n    password = ''.join(random.choices(letters_and_digits, k=length))\n    \n    return password\n\n# Example usage\npassword = generate_password(10)\nprint(password)\n```", "answer": "", "question_quality": "0", "code": ""}
{"key": "HumanEval/55_prompt", "name": "HumanEval/55", "prompt_type": "prompt", "index": 0, "response": "```python\ndef calculate_average(numbers):\n    if not numbers:\n        return 0\n      \n    total = sum(numbers)\n    average = total / len(numbers)\n    \n    return average\n\nnumbers = [2, 4, 6, 8, 10]\naverage = calculate_average(numbers)\nprint(average)\n```", "answer": "", "question_quality": "0", "code": ""}
{"key": "HumanEval/56_prompt", "name": "HumanEval/56", "prompt_type": "prompt", "index": 0, "response": "```python\ndef calculate_area_of_circle(radius):\n    if radius < 0:\n        raise ValueError(\"Radius cannot be negative\")\n    else:\n        return 3.14159 * radius**2\n\n# Example usage:\nradius = 5\narea = calculate_area_of_circle(radius)\nprint(f\"The area of the circle with radius {radius} is {area}\")\n```", "answer": "", "question_quality": "0", "code": ""}
{"key": "HumanEval/57_prompt", "name": "HumanEval/57", "prompt_type": "prompt", "index": 0, "response": "```python\ndef calculate_average(nums):\n    total_sum = 0\n\n    for num in nums:\n       total_sum += num\n\n    avg = total_sum / len(nums)\n    return avg\n\nnumbers = [5, 10, 15, 20, 25]\naverage = calculate_average(numbers)\nprint(\"Average:\", average)\n```", "answer": "", "question_quality": "0", "code": ""}
{"key": "HumanEval/58_prompt", "name": "HumanEval/58", "prompt_type": "prompt", "index": 0, "response": "Information:\n- You need to write a function in Python that takes in a list of numbers and returns the sum of all numbers in the list.\n- The function should be named `calculate_sum` and should take one parameter, a list of numbers.\n- The function should return the sum of all numbers in the list.\n\n```python\ndef calculate_sum(numbers):\n    return sum(numbers)\n```", "answer": "", "question_quality": "0", "code": ""}
{"key": "HumanEval/59_prompt", "name": "HumanEval/59", "prompt_type": "prompt", "index": 0, "response": "```python\ndef calculate_average(numbers):\n    if numbers:\n        return sum(numbers) / len(numbers)\n    else:\n        return 0\n\n# Example usage\nnumbers = [10, 20, 30, 40, 50]\naverage = calculate_average(numbers)\nprint(\"Average:\", average)\n```", "answer": "", "question_quality": "0", "code": ""}
{"key": "HumanEval/60_prompt", "name": "HumanEval/60", "prompt_type": "prompt", "index": 0, "response": "Given information:\n- Create a function named `calculate_average` that takes a list of numbers as input and returns the average of those numbers.\n- The function should ignore any non-numeric values in the list.\n- The average should be rounded to 2 decimal places.\n\n```python\ndef calculate_average(numbers):\n    total = 0\n    count = 0\n    for num in numbers:\n        if isinstance(num, (int, float)):\n            total += num\n            count += 1\n    if count == 0:\n        return 0\n    return round(total / count, 2)\n\n# Example usage\nnumbers = [1, 2, 3, 'a', 4, 5.5]\nprint(calculate_average(numbers))  # Output: 3.25\n```", "answer": "", "question_quality": "0", "code": ""}
{"key": "HumanEval/61_prompt", "name": "HumanEval/61", "prompt_type": "prompt", "index": 0, "response": "Sure, please provide me with the information you would like me to use to generate Python3 code.", "answer": "", "question_quality": "0", "code": ""}
{"key": "HumanEval/62_prompt", "name": "HumanEval/62", "prompt_type": "prompt", "index": 0, "response": "I'm sorry, but you have not provided any specific information for me to generate Python3 code. If you can provide more details or requirements, I'll be happy to assist you with writing the code.", "answer": "", "question_quality": "0", "code": ""}
{"key": "HumanEval/63_prompt", "name": "HumanEval/63", "prompt_type": "prompt", "index": 0, "response": "```python\ndef calculate_sum(nums):\n    total = 0\n    for num in nums:\n        total += num\n    return total\n\nnumbers = [1, 2, 3, 4, 5]\nresult = calculate_sum(numbers)\nprint(result)\n```", "answer": "", "question_quality": "0", "code": ""}
{"key": "HumanEval/64_prompt", "name": "HumanEval/64", "prompt_type": "prompt", "index": 0, "response": "Requirements:\n- Create a function named \"calculate_average\" that takes a list of numbers as input and returns the average of those numbers.\n\n```python\ndef calculate_average(numbers):\n    if len(numbers) == 0:\n        return 0\n    sum_numbers = sum(numbers)\n    avg = sum_numbers / len(numbers)\n    return avg\n```\n\nExample Usage:\n```python\nnumbers = [5, 10, 15, 20, 25]\naverage = calculate_average(numbers)\nprint(average)  # Output: 15.0\n```", "answer": "", "question_quality": "0", "code": ""}
{"key": "HumanEval/65_prompt", "name": "HumanEval/65", "prompt_type": "prompt", "index": 0, "response": "```python\ndef calculate_median(data):\n    sorted_data = sorted(data)\n    n = len(sorted_data)\n    \n    if n % 2 == 0:\n        return (sorted_data[n//2 - 1] + sorted_data[n//2]) / 2\n    else:\n        return sorted_data[n//2]\n\n# Example usage\ndata = [3, 1, 4, 1, 5, 9, 2, 6, 5, 3, 5]\nmedian = calculate_median(data)\nprint(\"Median:\", median)\n```", "answer": "", "question_quality": "0", "code": ""}
{"key": "HumanEval/66_prompt", "name": "HumanEval/66", "prompt_type": "prompt", "index": 0, "response": "```python\n# Define a function to calculate the factorial of a number\ndef factorial(n):\n    if n == 0:\n        return 1\n    else:\n        return n * factorial(n-1)\n\n# Test the function\nnumber = 5\nresult = factorial(number)\nprint(f\"The factorial of {number} is {result}\")\n```", "answer": "", "question_quality": "0", "code": ""}
{"key": "HumanEval/67_prompt", "name": "HumanEval/67", "prompt_type": "prompt", "index": 0, "response": "```python\nclass SoftwareDeveloper:\n    def __init__(self, name, years_of_experience, expertise):\n        self.name = name\n        self.years_of_experience = years_of_experience\n        self.expertise = expertise\n\n    def write_high_quality_code(self):\n        print(f\"{self.name} writes high quality code.\")\n\n    def code_review(self, code):\n        quality = self.analyze_code_quality(code)\n        if quality == \"high\":\n            print(\"Code quality is high.\")\n        else:\n            print(\"Code quality needs improvement.\")\n\n    def analyze_code_quality(self, code):\n        # Some code analysis logic here to determine code quality\n        return \"high\"\n        \n# Example usage\ndeveloper = SoftwareDeveloper(\"John Doe\", 5, \"Python\")\ndeveloper.write_high_quality_code()\ndeveloper.code_review(\"def hello_world():\\n    print('Hello, World!')\")\n```\n", "answer": "", "question_quality": "0", "code": ""}
{"key": "HumanEval/68_prompt", "name": "HumanEval/68", "prompt_type": "prompt", "index": 0, "response": "```python\ndef calculate_mean(numbers):\n    total = sum(numbers)\n    mean = total / len(numbers)\n    return mean\n\nnumbers = [2, 4, 6, 8, 10]\nmean = calculate_mean(numbers)\nprint(\"Mean:\", mean)\n```", "answer": "", "question_quality": "0", "code": ""}
{"key": "HumanEval/69_prompt", "name": "HumanEval/69", "prompt_type": "prompt", "index": 0, "response": "Below is the Python3 code that generates a Fibonacci sequence:\n\n```python\ndef fibonacci(n):\n    fib_sequence = [0, 1]\n    \n    for i in range(2, n):\n        fib_sequence.append(fib_sequence[i-1] + fib_sequence[i-2])\n    \n    return fib_sequence\n\nn = 10\nresult = fibonacci(n)\nprint(result)\n```\n\nThis code defines a function `fibonacci` that generates a Fibonacci sequence up to the nth term. It then calls the function with `n = 10` and prints the result.", "answer": "", "question_quality": "0", "code": ""}
{"key": "HumanEval/70_prompt", "name": "HumanEval/70", "prompt_type": "prompt", "index": 0, "response": "Sure, please provide me with the information you have so that I can generate the Python3 code for you.", "answer": "", "question_quality": "0", "code": ""}
{"key": "HumanEval/71_prompt", "name": "HumanEval/71", "prompt_type": "prompt", "index": 0, "response": "```python\ndef calculate_average(numbers):\n    \"\"\"\n    This function takes a list of numbers as input and returns the average of those numbers.\n    \"\"\"\n    if len(numbers) == 0:\n        return 0\n    return sum(numbers) / len(numbers)\n\n# Example usage\nnumbers = [1, 2, 3, 4, 5]\naverage = calculate_average(numbers)\nprint(\"The average is:\", average)\n```", "answer": "", "question_quality": "0", "code": ""}
{"key": "HumanEval/72_prompt", "name": "HumanEval/72", "prompt_type": "prompt", "index": 0, "response": "```python\nfrom collections import Counter\n\ndef find_most_common_element(arr):\n    counter = Counter(arr)\n    most_common = counter.most_common(1)[0][0]\n    return most_common\n\narr = [1, 2, 2, 3, 3, 3, 4, 4, 4, 4, 5]\nprint(find_most_common_element(arr))\n```", "answer": "", "question_quality": "0", "code": ""}
{"key": "HumanEval/73_prompt", "name": "HumanEval/73", "prompt_type": "prompt", "index": 0, "response": "```python\ndef generate_fibonacci_sequence(n):\n    fibonacci_sequence = [0, 1]\n    for i in range(2, n):\n        next_num = fibonacci_sequence[i-1] + fibonacci_sequence[i-2]\n        fibonacci_sequence.append(next_num)\n    return fibonacci_sequence\n\nn = 10\nfibonacci_sequence = generate_fibonacci_sequence(n)\nprint(fibonacci_sequence)\n```", "answer": "", "question_quality": "0", "code": ""}
{"key": "HumanEval/74_prompt", "name": "HumanEval/74", "prompt_type": "prompt", "index": 0, "response": "Sure, please provide me with the information you would like the Python3 code to include.", "answer": "", "question_quality": "0", "code": ""}
{"key": "HumanEval/75_prompt", "name": "HumanEval/75", "prompt_type": "prompt", "index": 0, "response": "```python\ndef calculate_discount_price(original_price, discount):\n    if discount < 0 or discount > 100:\n        return \"Invalid discount percentage\"\n    \n    discount_amount = original_price * (discount / 100)\n    discount_price = original_price - discount_amount\n    \n    return discount_price\n\noriginal_price = 100\ndiscount_percentage = 20\n\nfinal_price = calculate_discount_price(original_price, discount_percentage)\nprint(f\"The final price after a {discount_percentage}% discount is: ${final_price}\")\n```", "answer": "", "question_quality": "0", "code": ""}
{"key": "HumanEval/76_prompt", "name": "HumanEval/76", "prompt_type": "prompt", "index": 0, "response": "```python\nclass SoftwareDeveloper:\n    def __init__(self, name, expertise):\n        self.name = name\n        self.expertise = expertise\n\n    def write_high_quality_code(self):\n        print(f\"{self.name} writes high quality code in {self.expertise}\")\n\ndeveloper1 = SoftwareDeveloper(\"John\", \"Python\")\ndeveloper1.write_high_quality_code()\n```", "answer": "", "question_quality": "0", "code": ""}
{"key": "HumanEval/77_prompt", "name": "HumanEval/77", "prompt_type": "prompt", "index": 0, "response": "```python\ndef find_common_elements(arr1, arr2):\n    common_elements = []\n    for element in arr1:\n        if element in arr2:\n            common_elements.append(element)\n    return common_elements\n\narr1 = [1, 2, 3, 4, 5]\narr2 = [3, 4, 5, 6, 7]\nresult = find_common_elements(arr1, arr2)\nprint(result)\n```", "answer": "", "question_quality": "0", "code": ""}
{"key": "HumanEval/78_prompt", "name": "HumanEval/78", "prompt_type": "prompt", "index": 0, "response": "**Problem:** You need to create a program that calculates the area of a rectangle when given the length and width as input.\n\n**Input:** \n- Length of the rectangle\n- Width of the rectangle\n\n**Output:**\n- Area of the rectangle\n\n```python\ndef calculate_rectangle_area(length, width):\n    # Calculate the area of the rectangle\n    area = length * width\n    return area\n\n# Input values for length and width\nlength = float(input(\"Enter the length of the rectangle: \"))\nwidth = float(input(\"Enter the width of the rectangle: \"))\n\n# Call the function to calculate the area\narea = calculate_rectangle_area(length, width)\n\n# Display the area of the rectangle\nprint(\"The area of the rectangle is:\", area)\n```", "answer": "", "question_quality": "0", "code": ""}
{"key": "HumanEval/79_prompt", "name": "HumanEval/79", "prompt_type": "prompt", "index": 0, "response": "```python\ndef create_triangle(rows):\n    for i in range(rows):\n        for j in range(i+1):\n            print(\"*\", end=\"\")\n        print()\n\nrows = 5\ncreate_triangle(rows)\n```", "answer": "", "question_quality": "0", "code": ""}
{"key": "HumanEval/80_prompt", "name": "HumanEval/80", "prompt_type": "prompt", "index": 0, "response": "```python\nclass SoftwareDeveloper:\n    def __init__(self, name, programming_languages):\n        self.name = name\n        self.programming_languages = programming_languages\n\n    def write_high_quality_code(self):\n        print(f\"{self.name} is writing high quality code\")\n\n    def generate_code(self, information):\n        # Write code generation logic here based on the information provided\n        pass\n\n# Information provided\nexpert = SoftwareDeveloper(\"John Doe\", [\"Python\", \"Java\", \"C++\"])\ninformation = {\n    \"task\": \"Generate Python3 code\",\n    \"quality\": \"High quality\"\n}\n\n# Generate Python3 code\nexpert.generate_code(information)\n```", "answer": "", "question_quality": "0", "code": ""}
{"key": "HumanEval/81_prompt", "name": "HumanEval/81", "prompt_type": "prompt", "index": 0, "response": "```python\ndef is_prime(num):\n    if num <= 1:\n        return False\n    for i in range(2, int(num**0.5) + 1):\n        if num % i == 0:\n            return False\n    return True\n```", "answer": "", "question_quality": "0", "code": ""}
{"key": "HumanEval/82_prompt", "name": "HumanEval/82", "prompt_type": "prompt", "index": 0, "response": "```python\ndef fibonacci(n):\n    if n <= 0:\n        return \"Invalid input. Please enter a positive number.\"\n    elif n == 1:\n        return 0\n    elif n == 2:\n        return 1\n    else:\n        prev1 = 0\n        prev2 = 1\n        current = 0\n        for i in range(2, n):\n            current = prev1 + prev2\n            prev1, prev2 = prev2, current\n        return current\n\n# Test the function\nn = 10\nresult = fibonacci(n)\nprint(f\"The {n}th Fibonacci number is: {result}\")\n```\n", "answer": "", "question_quality": "0", "code": ""}
{"key": "HumanEval/83_prompt", "name": "HumanEval/83", "prompt_type": "prompt", "index": 0, "response": "```python\ndef calculate_average(numbers):\n    if not numbers:\n        return 0\n    \n    return sum(numbers) / len(numbers)\n\nnumbers = [10, 20, 30, 40, 50]\naverage = calculate_average(numbers)\nprint(\"Average:\", average)\n```", "answer": "", "question_quality": "0", "code": ""}
{"key": "HumanEval/84_prompt", "name": "HumanEval/84", "prompt_type": "prompt", "index": 0, "response": "```python\nclass SoftwareDeveloper:\n    def __init__(self, name, expertise):\n        self.name = name\n        self.expertise = expertise\n        \n    def write_high_quality_code(self):\n        print(f\"{self.name} writes high quality code in {self.expertise}\")\n\n# create an instance of SoftwareDeveloper\ndeveloper = SoftwareDeveloper(\"Expert Developer\", \"Python\")\n\ndeveloper.write_high_quality_code()\n```", "answer": "", "question_quality": "0", "code": ""}
{"key": "HumanEval/85_prompt", "name": "HumanEval/85", "prompt_type": "prompt", "index": 0, "response": "```python\ndef is_prime(n):\n    if n <= 1:\n        return False\n    for i in range(2, int(n ** 0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n\ndef list_prime_numbers(limit):\n    prime_numbers = []\n    for num in range(2, limit + 1):\n        if is_prime(num):\n            prime_numbers.append(num)\n    return prime_numbers\n\nlimit = 20\nprint(list_prime_numbers(limit))\n```", "answer": "", "question_quality": "0", "code": ""}
{"key": "HumanEval/86_prompt", "name": "HumanEval/86", "prompt_type": "prompt", "index": 0, "response": "```python\ndef calculate_average(numbers):\n    total = sum(numbers)\n    average = total / len(numbers)\n    return average\n\nnumbers = [5, 10, 15, 20, 25]\naverage = calculate_average(numbers)\nprint(average)\n```", "answer": "", "question_quality": "0", "code": ""}
{"key": "HumanEval/87_prompt", "name": "HumanEval/87", "prompt_type": "prompt", "index": 0, "response": "```python\nclass SoftwareDeveloper:\n    def __init__(self, name, expertise):\n        self.name = name\n        self.expertise = expertise\n\n    def write_high_quality_code(self):\n        print(f\"{self.name} writes high quality code in {self.expertise}.\")\n\n# Example of creating a SoftwareDeveloper object\ndeveloper1 = SoftwareDeveloper(\"John\", \"Python\")\ndeveloper1.write_high_quality_code()\n```", "answer": "", "question_quality": "0", "code": ""}
{"key": "HumanEval/88_prompt", "name": "HumanEval/88", "prompt_type": "prompt", "index": 0, "response": "```python\nclass SoftwareDeveloper:\n    def __init__(self, name, expertise):\n        self.name = name\n        self.expertise = expertise\n\n    def write_high_quality_code(self):\n        # Code implementation here\n        pass\n\n# Create an instance of SoftwareDeveloper\ndeveloper = SoftwareDeveloper(\"John Doe\", \"Python\")\n\n# Call the method to write high quality code\ndeveloper.write_high_quality_code()\n```", "answer": "", "question_quality": "0", "code": ""}
{"key": "HumanEval/89_prompt", "name": "HumanEval/89", "prompt_type": "prompt", "index": 0, "response": "Number of employees: 5\n\nNames of employees:\n- John\n- Sarah\n- Mike\n- Emily\n- Tim\n\nSalary of employees:\n- John: $5000\n- Sarah: $6000\n- Mike: $5500\n- Emily: $6500\n- Tim: $7000\n\nPlease write Python3 code to calculate the average salary of these employees.", "answer": "", "question_quality": "0", "code": ""}
{"key": "HumanEval/90_prompt", "name": "HumanEval/90", "prompt_type": "prompt", "index": 0, "response": "```python\ndef calculate_average(numbers):\n    if len(numbers) == 0:\n        return 0\n    else:\n        return sum(numbers) / len(numbers)\n\nnumbers = [5, 10, 15, 20, 25]\naverage = calculate_average(numbers)\nprint(\"Average:\", average)\n```", "answer": "", "question_quality": "0", "code": ""}
{"key": "HumanEval/91_prompt", "name": "HumanEval/91", "prompt_type": "prompt", "index": 0, "response": "```python\n# Define a function to calculate the factorial of a number\ndef factorial(n):\n    if n == 0:\n        return 1\n    else:\n        return n * factorial(n-1)\n    \n# Test the factorial function with an example\nn = 5\nresult = factorial(n)\nprint(f\"The factorial of {n} is: {result}\")\n```", "answer": "", "question_quality": "0", "code": ""}
{"key": "HumanEval/92_prompt", "name": "HumanEval/92", "prompt_type": "prompt", "index": 0, "response": "```python\ndef generate_fibonacci_sequence(n):\n    fibonacci_sequence = [0, 1]\n    for i in range(2, n):\n        next_num = fibonacci_sequence[i-1] + fibonacci_sequence[i-2]\n        fibonacci_sequence.append(next_num)\n    return fibonacci_sequence\n\nn = 10\nfibonacci_result = generate_fibonacci_sequence(n)\nprint(fibonacci_result)\n```", "answer": "", "question_quality": "0", "code": ""}
{"key": "HumanEval/93_prompt", "name": "HumanEval/93", "prompt_type": "prompt", "index": 0, "response": "```python\ndef calculate_average(numbers):\n    if not numbers:\n        return 0\n    \n    total = sum(numbers)\n    average = total / len(numbers)\n    return average\n```", "answer": "", "question_quality": "0", "code": ""}
{"key": "HumanEval/94_prompt", "name": "HumanEval/94", "prompt_type": "prompt", "index": 0, "response": "Sure, I'd be happy to help! Please provide me with the information that you have and I will generate the Python code for you.", "answer": "", "question_quality": "0", "code": ""}
{"key": "HumanEval/95_prompt", "name": "HumanEval/95", "prompt_type": "prompt", "index": 0, "response": "**Information:**\n\n1. You have a list of integers `nums = [2, 3, 4, 5, 6, 7, 8]`\n2. You need to create a new list `squared_nums` which will contain the square of each number in the original list.\n\n```python\n# Generate Python3 Code:\nnums = [2, 3, 4, 5, 6, 7, 8]\nsquared_nums = [num**2 for num in nums]\nprint(squared_nums)\n```", "answer": "", "question_quality": "0", "code": ""}
{"key": "HumanEval/96_prompt", "name": "HumanEval/96", "prompt_type": "prompt", "index": 0, "response": "### Information:\n- You have been given a list of numbers (integers) called `numbers`.\n- Your task is to write a Python function called `filter_even_numbers` that takes the list of numbers as input and filters out only the even numbers from the list.\n- The function should return a new list containing only the even numbers.\n\n### Example:\n```python\nnumbers = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n\n# Expected output: [2, 4, 6, 8, 10]\n```\n\n### Your Python code:\n```python\ndef filter_even_numbers(numbers):\n    even_numbers = [num for num in numbers if num % 2 == 0]\n    return even_numbers\n\n# Test the function with the example numbers list\nnumbers = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\nfiltered_numbers = filter_even_numbers(numbers)\nprint(filtered_numbers)\n```", "answer": "", "question_quality": "0", "code": ""}
{"key": "HumanEval/97_prompt", "name": "HumanEval/97", "prompt_type": "prompt", "index": 0, "response": "```python\nclass SoftwareDeveloper:\n    def __init__(self, name, experience, expertise):\n        self.name = name\n        self.experience = experience\n        self.expertise = expertise\n\n    def write_high_quality_code(self):\n        print(f\"{self.name} writes high quality code\")\n\n# Create an instance of SoftwareDeveloper\ndeveloper = SoftwareDeveloper(\"John Doe\", 5, \"Python\")\n\n# Call the write_high_quality_code method\ndeveloper.write_high_quality_code()\n```", "answer": "", "question_quality": "0", "code": ""}
{"key": "HumanEval/98_prompt", "name": "HumanEval/98", "prompt_type": "prompt", "index": 0, "response": "```python\ndef calculate_sum(nums):\n    return sum(nums)\n\nnumbers = [1, 2, 3, 4, 5]\ntotal_sum = calculate_sum(numbers)\nprint(f\"The sum of the numbers is: {total_sum}\")\n```", "answer": "", "question_quality": "0", "code": ""}
{"key": "HumanEval/99_prompt", "name": "HumanEval/99", "prompt_type": "prompt", "index": 0, "response": "```python\nclass ExpertSoftwareDeveloper:\n    def __init__(self, name, years_of_experience):\n        self.name = name\n        self.years_of_experience = years_of_experience\n    \n    def write_high_quality_code(self):\n        # Write high quality code here\n        pass\n\n# Example of creating an instance of ExpertSoftwareDeveloper\nexpert_developer = ExpertSoftwareDeveloper(\"John Doe\", 10)\nexpert_developer.write_high_quality_code()\n```", "answer": "", "question_quality": "0", "code": ""}
{"key": "HumanEval/100_prompt", "name": "HumanEval/100", "prompt_type": "prompt", "index": 0, "response": "```python\ndef calculate_sum(numbers):\n    try:\n        if all(isinstance(num, (int, float)) for num in numbers):\n            return sum(numbers)\n        else:\n            return \"Error: Input list should only contain integers or floats\"\n    except:\n        return \"Error: An error occurred while calculating the sum\"\n\n# Example usage:\nnumbers = [1, 2, 3, 4.5]\nresult = calculate_sum(numbers)\nprint(result)  # Output: 10.5\n```", "answer": "", "question_quality": "0", "code": ""}
{"key": "HumanEval/101_prompt", "name": "HumanEval/101", "prompt_type": "prompt", "index": 0, "response": "```python\ndef calculate_sum(num1, num2):\n    return num1 + num2\n\ndef calculate_product(num1, num2):\n    return num1 * num2\n\nnum1 = 10\nnum2 = 20\n\nsum_result = calculate_sum(num1, num2)\nproduct_result = calculate_product(num1, num2)\n\nprint(\"Sum:\", sum_result)\nprint(\"Product:\", product_result)\n```", "answer": "", "question_quality": "0", "code": ""}
{"key": "HumanEval/102_prompt", "name": "HumanEval/102", "prompt_type": "prompt", "index": 0, "response": "```python\ndef add_numbers(num1, num2):\n    sum = num1 + num2\n    return sum\n\nresult = add_numbers(5, 10)\nprint(result)\n```", "answer": "", "question_quality": "0", "code": ""}
{"key": "HumanEval/103_prompt", "name": "HumanEval/103", "prompt_type": "prompt", "index": 0, "response": "```python\ndef calculate_average(nums):\n    if not nums:\n        return 0\n    return sum(nums) / len(nums)\n\nnumbers = [10, 20, 30, 40, 50]\navg = calculate_average(numbers)\nprint(f\"The average of the numbers is: {avg}\")\n```", "answer": "", "question_quality": "0", "code": ""}
{"key": "HumanEval/104_prompt", "name": "HumanEval/104", "prompt_type": "prompt", "index": 0, "response": "```python\ndef calculate_sum(lst):\n    total_sum = sum(lst)\n    return total_sum\n\nnumbers = [1, 2, 3, 4, 5]\nresult = calculate_sum(numbers)\nprint(result)\n```", "answer": "", "question_quality": "0", "code": ""}
{"key": "HumanEval/105_prompt", "name": "HumanEval/105", "prompt_type": "prompt", "index": 0, "response": "```python\ndef calculate_total_salary(base_salary, bonus):\n    total_salary = base_salary + bonus\n    return total_salary\n\nbase_salary = 50000\nbonus = 10000\n\ntotal_salary = calculate_total_salary(base_salary, bonus)\nprint(\"Total salary is:\", total_salary)\n```", "answer": "", "question_quality": "0", "code": ""}
{"key": "HumanEval/106_prompt", "name": "HumanEval/106", "prompt_type": "prompt", "index": 0, "response": "To help me generate the Python code accurately, please provide the information or requirements that you would like me to use for writing the code.", "answer": "", "question_quality": "0", "code": ""}
{"key": "HumanEval/107_prompt", "name": "HumanEval/107", "prompt_type": "prompt", "index": 0, "response": "### Information:\n1. Create a function called `calculate_area_triangle` that accepts base and height of a triangle as parameters and calculates the area of the triangle.\n2. Use the formula for calculating area of a triangle: `area = 0.5 * base * height`.\n\n### Python3 code:\n```python\ndef calculate_area_triangle(base, height):\n    area = 0.5 * base * height\n    return area\n\n# Example usage\nbase = 5\nheight = 10\narea = calculate_area_triangle(base, height)\nprint(\"The area of the triangle is:\", area)\n```", "answer": "", "question_quality": "0", "code": ""}
{"key": "HumanEval/108_prompt", "name": "HumanEval/108", "prompt_type": "prompt", "index": 0, "response": "```python\ndef is_palindrome(s):\n    s = ''.join(e for e in s if e.isalnum()).lower()\n    return s == s[::-1]\n\nstring = \"A man, a plan, a canal, Panama!\"\nprint(is_palindrome(string))  # Output: True\n```", "answer": "", "question_quality": "0", "code": ""}
{"key": "HumanEval/109_prompt", "name": "HumanEval/109", "prompt_type": "prompt", "index": 0, "response": "```python\ndef calculate_total_salary(base_salary, bonuses):\n    total_salary = base_salary + sum(bonuses)\n    return total_salary\n\nbase_salary = 50000\nbonuses = [2000, 3000, 1500]\n\ntotal_salary = calculate_total_salary(base_salary, bonuses)\nprint(\"Total Salary:\", total_salary)\n```", "answer": "", "question_quality": "0", "code": ""}
{"key": "HumanEval/110_prompt", "name": "HumanEval/110", "prompt_type": "prompt", "index": 0, "response": "Sure, please provide me with the information needed to generate the Python3 code.", "answer": "", "question_quality": "0", "code": ""}
{"key": "HumanEval/111_prompt", "name": "HumanEval/111", "prompt_type": "prompt", "index": 0, "response": "Sure! Please provide the necessary information for me to generate the Python3 code for you.", "answer": "", "question_quality": "0", "code": ""}
{"key": "HumanEval/112_prompt", "name": "HumanEval/112", "prompt_type": "prompt", "index": 0, "response": "```python\ndef calculate_average(numbers):\n    total_sum = sum(numbers)\n    average = total_sum / len(numbers)\n    return average\n\nnumbers = [3, 7, 9, 12, 5]\naverage = calculate_average(numbers)\nprint(\"The average is:\", average)\n```", "answer": "", "question_quality": "0", "code": ""}
{"key": "HumanEval/113_prompt", "name": "HumanEval/113", "prompt_type": "prompt", "index": 0, "response": "```python\n# Define a class for a software developer\nclass SoftwareDeveloper:\n    \n    def __init__(self, name, expertise):\n        self.name = name\n        self.expertise = expertise\n        \n    def write_high_quality_code(self):\n        print(f\"{self.name} is an expert software developer who writes high quality code.\")\n        \n# Create an instance of the SoftwareDeveloper class\ndeveloper = SoftwareDeveloper(\"John Doe\", \"Python\")\n\n# Call the method to write high quality code\ndeveloper.write_high_quality_code()\n```", "answer": "", "question_quality": "0", "code": ""}
{"key": "HumanEval/114_prompt", "name": "HumanEval/114", "prompt_type": "prompt", "index": 0, "response": "```python\ndef calculate_shipping_cost(item_list):\n    total_cost = 0\n    \n    for item in item_list:\n        if item == \"small\":\n            total_cost += 3\n        elif item == \"medium\":\n            total_cost += 5\n        elif item == \"large\":\n            total_cost += 7\n        else:\n            print(\"Invalid item size: \" + item)\n    \n    return total_cost\n\nitem_list = [\"small\", \"medium\", \"large\", \"invalid\"]\nshipping_cost = calculate_shipping_cost(item_list)\nprint(\"Total shipping cost: $\" + str(shipping_cost))\n```", "answer": "", "question_quality": "0", "code": ""}
{"key": "HumanEval/115_prompt", "name": "HumanEval/115", "prompt_type": "prompt", "index": 0, "response": "```python\ndef calculate_sum_of_even_numbers(lst):\n    sum_even = 0\n    for num in lst:\n        if num % 2 == 0:\n            sum_even += num\n    return sum_even\n\n# Test the function\nlst = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\nprint(calculate_sum_of_even_numbers(lst))\n```", "answer": "", "question_quality": "0", "code": ""}
{"key": "HumanEval/116_prompt", "name": "HumanEval/116", "prompt_type": "prompt", "index": 0, "response": "Sure, please provide the information you have and I will generate the Python3 code for you.", "answer": "", "question_quality": "0", "code": ""}
{"key": "HumanEval/117_prompt", "name": "HumanEval/117", "prompt_type": "prompt", "index": 0, "response": "Sure, please provide me with the information you would like me to generate Python3 code from.", "answer": "", "question_quality": "0", "code": ""}
{"key": "HumanEval/118_prompt", "name": "HumanEval/118", "prompt_type": "prompt", "index": 0, "response": "Sure, please provide me with the information you have so I can generate the Python3 code for you.", "answer": "", "question_quality": "0", "code": ""}
{"key": "HumanEval/119_prompt", "name": "HumanEval/119", "prompt_type": "prompt", "index": 0, "response": "```python\ndef greet_user(name):\n    message = f\"Hello, {name}! Welcome to our program.\"\n    print(message)\n\ndef main():\n    user_name = input(\"Enter your name: \")\n    greet_user(user_name)\n\nif __name__ == \"__main__\":\n    main()\n```", "answer": "", "question_quality": "0", "code": ""}
{"key": "HumanEval/120_prompt", "name": "HumanEval/120", "prompt_type": "prompt", "index": 0, "response": "```python\ndef count_vowels(s):\n    vowels = 'aeiou'\n    count = 0\n    for char in s:\n        if char.lower() in vowels:\n            count += 1\n    return count\n```", "answer": "", "question_quality": "0", "code": ""}
{"key": "HumanEval/121_prompt", "name": "HumanEval/121", "prompt_type": "prompt", "index": 0, "response": "```python\ndef is_prime(num):\n    if num < 2:\n        return False\n    for i in range(2, int(num ** 0.5) + 1):\n        if num % i == 0:\n            return False\n    return True\n\ndef generate_prime_numbers(n):\n    prime_numbers = []\n    num = 2\n    while len(prime_numbers) < n:\n        if is_prime(num):\n            prime_numbers.append(num)\n        num += 1\n    return prime_numbers\n\n# Example usage\nn = 10\nprint(generate_prime_numbers(n))\n```", "answer": "", "question_quality": "0", "code": ""}
{"key": "HumanEval/122_prompt", "name": "HumanEval/122", "prompt_type": "prompt", "index": 0, "response": "```python\ndef calculate_total_bill(item_prices, tax_rate):\n    total = 0\n    for price in item_prices:\n        total += price\n    total_with_tax = total * (1 + tax_rate)\n    return total_with_tax\n\nitem_prices = [20.50, 15.75, 36.20]\ntax_rate = 0.1\n\ntotal_bill = calculate_total_bill(item_prices, tax_rate)\nprint(f\"The total bill including tax is: ${total_bill:.2f}\")\n```", "answer": "", "question_quality": "0", "code": ""}
{"key": "HumanEval/123_prompt", "name": "HumanEval/123", "prompt_type": "prompt", "index": 0, "response": "Information:\n- You have a list of numbers: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n- You need to write a function that takes this list of numbers as input and returns a new list with only the even numbers\n\n```python\ndef filter_even_numbers(numbers):\n    return [num for num in numbers if num % 2 == 0]\n\nnumbers = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\neven_numbers = filter_even_numbers(numbers)\nprint(even_numbers)\n```", "answer": "", "question_quality": "0", "code": ""}
{"key": "HumanEval/124_prompt", "name": "HumanEval/124", "prompt_type": "prompt", "index": 0, "response": "Sure, please provide me with the information that you have and I'll generate the Python3 code for you.", "answer": "", "question_quality": "0", "code": ""}
{"key": "HumanEval/125_prompt", "name": "HumanEval/125", "prompt_type": "prompt", "index": 0, "response": "```python\ndef calculate_average(numbers):\n    if not numbers:\n        return None\n    \n    total = sum(numbers)\n    average = total / len(numbers)\n    \n    return average\n\nnumbers = [10, 20, 30, 40, 50]\naverage = calculate_average(numbers)\nprint(\"The average is:\", average)\n```", "answer": "", "question_quality": "0", "code": ""}
{"key": "HumanEval/126_prompt", "name": "HumanEval/126", "prompt_type": "prompt", "index": 0, "response": "```python\ndef calculate_average(numbers):\n    if not numbers:\n        return 0\n    \n    total = sum(numbers)\n    average = total / len(numbers)\n    \n    return average\n\nnumbers = [75, 82, 90, 95, 87]\naverage = calculate_average(numbers)\nprint(\"Average:\", average)\n```", "answer": "", "question_quality": "0", "code": ""}
{"key": "HumanEval/127_prompt", "name": "HumanEval/127", "prompt_type": "prompt", "index": 0, "response": "```python\ndef fibonacci(n):\n    if n <= 0:\n        return \"Invalid input. Please enter a positive integer\"\n    elif n == 1:\n        return 0\n    elif n == 2:\n        return 1\n    else:\n        a, b = 0, 1\n        for _ in range(2, n):\n            a, b = b, a + b\n        return b\n\nn = 10\nprint(f\"Fibonacci number at position {n}: {fibonacci(n)}\")\n```", "answer": "", "question_quality": "0", "code": ""}
{"key": "HumanEval/128_prompt", "name": "HumanEval/128", "prompt_type": "prompt", "index": 0, "response": "```python\ndef calculate_average(numbers):\n    if not numbers:\n        return 0\n    return sum(numbers) / len(numbers)\n\ninput_numbers = [12, 15, 20, 25, 30]\naverage = calculate_average(input_numbers)\nprint(\"Average:\", average)\n```", "answer": "", "question_quality": "0", "code": ""}
{"key": "HumanEval/129_prompt", "name": "HumanEval/129", "prompt_type": "prompt", "index": 0, "response": "1. The task is to write a function that calculates the factorial of a given number.\n2. The function should take an integer as input and return the factorial of that number.\n3. The factorial of a number n is the product of all positive integers less than or equal to n.\n\n```python\ndef calculate_factorial(n):\n    if n == 0:\n        return 1\n    else:\n        return n * calculate_factorial(n-1)\n\n# Test the function\nnum = 5\nresult = calculate_factorial(num)\nprint(f\"The factorial of {num} is {result}\")\n```", "answer": "", "question_quality": "0", "code": ""}
{"key": "HumanEval/130_prompt", "name": "HumanEval/130", "prompt_type": "prompt", "index": 0, "response": "```python\ndef is_prime(num):\n    if num < 2:\n        return False\n    for i in range(2, int(num ** 0.5) + 1):\n        if num % i == 0:\n            return False\n    return True\n\ndef get_primes(start, end):\n    prime_numbers = []\n    for i in range(start, end + 1):\n        if is_prime(i):\n            prime_numbers.append(i)\n    return prime_numbers\n\nstart = 10\nend = 50\nprint(get_primes(start, end))\n```", "answer": "", "question_quality": "0", "code": ""}
{"key": "HumanEval/131_prompt", "name": "HumanEval/131", "prompt_type": "prompt", "index": 0, "response": "```python\ndef sum_of_multiples(n):\n    sum = 0\n    for i in range(n):\n        if i % 3 == 0 or i % 5 == 0:\n            sum += i\n    return sum\n\nn = 10\nresult = sum_of_multiples(n)\nprint(result)\n```", "answer": "", "question_quality": "0", "code": ""}
{"key": "HumanEval/132_prompt", "name": "HumanEval/132", "prompt_type": "prompt", "index": 0, "response": "```python\nclass SoftwareDeveloper:\n    def __init__(self, name, experience, skills):\n        self.name = name\n        self.experience = experience\n        self.skills = skills\n    \n    def write_high_quality_code(self):\n        print(f\"{self.name} writes high quality code.\")\n    \n    def get_experience(self):\n        return self.experience\n    \n    def get_skills(self):\n        return self.skills\n\n# Example usage\ndeveloper = SoftwareDeveloper(\"John\", 5, [\"Python\", \"Java\", \"C++\"])\ndeveloper.write_high_quality_code()\nprint(developer.get_experience())\nprint(developer.get_skills())\n```", "answer": "", "question_quality": "0", "code": ""}
{"key": "HumanEval/133_prompt", "name": "HumanEval/133", "prompt_type": "prompt", "index": 0, "response": "Sure, I'd be happy to help. Can you please provide me with the specific requirements or functionality you would like the Python3 code to cover?", "answer": "", "question_quality": "0", "code": ""}
{"key": "HumanEval/134_prompt", "name": "HumanEval/134", "prompt_type": "prompt", "index": 0, "response": "```python\ndef sum_of_numbers(nums):\n    sum = 0\n    for num in nums:\n        sum += num\n    return sum\n\nnumbers = [1, 2, 3, 4, 5]\nresult = sum_of_numbers(numbers)\nprint(result)\n```", "answer": "", "question_quality": "0", "code": ""}
{"key": "HumanEval/135_prompt", "name": "HumanEval/135", "prompt_type": "prompt", "index": 0, "response": "```\nclass SoftwareDeveloper:\n    def __init__(self, name, years_of_experience):\n        self.name = name\n        self.years_of_experience = years_of_experience\n\n    def write_high_quality_code(self):\n        print(f\"{self.name} writes high quality code\")\n\ndeveloper = SoftwareDeveloper(\"John\", 5)\ndeveloper.write_high_quality_code()\n```", "answer": "", "question_quality": "0", "code": ""}
{"key": "HumanEval/136_prompt", "name": "HumanEval/136", "prompt_type": "prompt", "index": 0, "response": "```python\ndef calculate_average(nums):\n    if not nums:\n        return 0\n    return sum(nums) / len(nums)\n\nnumbers = [1, 2, 3, 4, 5]\naverage = calculate_average(numbers)\nprint(f\"The average of the numbers is: {average}\")\n```", "answer": "", "question_quality": "0", "code": ""}
{"key": "HumanEval/137_prompt", "name": "HumanEval/137", "prompt_type": "prompt", "index": 0, "response": "```python\ndef calculate_average(nums):\n    total = sum(nums)\n    num_count = len(nums)\n    if num_count == 0:\n        return 0\n    else:\n        return total / num_count\n\nnumbers = [2, 4, 6, 8, 10]\naverage = calculate_average(numbers)\nprint(\"The average of the numbers is:\", average)\n```", "answer": "", "question_quality": "0", "code": ""}
{"key": "HumanEval/138_prompt", "name": "HumanEval/138", "prompt_type": "prompt", "index": 0, "response": "```python\ndef is_prime(num):\n    if num < 2:\n        return False\n    for i in range(2, int(num ** 0.5) + 1):\n        if num % i == 0:\n            return False\n    return True\n\ndef generate_prime_numbers(n):\n    prime_numbers = []\n    num = 2\n    while len(prime_numbers) < n:\n        if is_prime(num):\n            prime_numbers.append(num)\n        num += 1\n    return prime_numbers\n\nn = 10\nprime_numbers = generate_prime_numbers(n)\nprint(prime_numbers)\n```", "answer": "", "question_quality": "0", "code": ""}
{"key": "HumanEval/139_prompt", "name": "HumanEval/139", "prompt_type": "prompt", "index": 0, "response": "Sure, please provide the information and I will generate Python3 code for you.", "answer": "", "question_quality": "0", "code": ""}
{"key": "HumanEval/140_prompt", "name": "HumanEval/140", "prompt_type": "prompt", "index": 0, "response": "```python\ndef calculate_average(numbers):\n    total = sum(numbers)\n    average = total / len(numbers)\n    return average\n\nnumbers = [10, 20, 30, 40, 50]\naverage = calculate_average(numbers)\nprint(\"The average of the numbers is:\", average)\n```", "answer": "", "question_quality": "0", "code": ""}
{"key": "HumanEval/141_prompt", "name": "HumanEval/141", "prompt_type": "prompt", "index": 0, "response": "```python\ndef calculate_average(numbers):\n    if not numbers:\n        return None\n    return sum(numbers) / len(numbers)\n\nnumbers = [10, 20, 30, 40, 50]\naverage = calculate_average(numbers)\nprint(f\"The average of the numbers is: {average}\")\n```", "answer": "", "question_quality": "0", "code": ""}
{"key": "HumanEval/142_prompt", "name": "HumanEval/142", "prompt_type": "prompt", "index": 0, "response": "```python\ndef calculate_average(nums):\n    total = sum(nums)\n    average = total / len(nums)\n    return average\n\nnumbers = [30, 50, 70, 90, 110]\naverage = calculate_average(numbers)\nprint(\"The average of the numbers is:\", average)\n```", "answer": "", "question_quality": "0", "code": ""}
{"key": "HumanEval/143_prompt", "name": "HumanEval/143", "prompt_type": "prompt", "index": 0, "response": "```python\ndef is_prime(num):\n    if num < 2:\n        return False\n    for i in range(2, int(num**0.5) + 1):\n        if num % i == 0:\n            return False\n    return True\n\ndef generate_prime_numbers(n):\n    prime_numbers = []\n    num = 2\n    while len(prime_numbers) < n:\n        if is_prime(num):\n            prime_numbers.append(num)\n        num += 1\n    return prime_numbers\n\nn = 10\nresult = generate_prime_numbers(n)\nprint(result)\n```", "answer": "", "question_quality": "0", "code": ""}
{"key": "HumanEval/144_prompt", "name": "HumanEval/144", "prompt_type": "prompt", "index": 0, "response": "To generate Python3 code, we need the input information.\n\nPlease provide the details you would like to use for generating Python3 code.", "answer": "", "question_quality": "0", "code": ""}
{"key": "HumanEval/145_prompt", "name": "HumanEval/145", "prompt_type": "prompt", "index": 0, "response": "```python\ndef main():\n    # Your code here\n    pass\n\nif __name__ == \"__main__\":\n    main()\n```", "answer": "", "question_quality": "0", "code": ""}
{"key": "HumanEval/146_prompt", "name": "HumanEval/146", "prompt_type": "prompt", "index": 0, "response": "```python\ndef check_palindrome(input_str):\n    cleaned_str = ''.join(char.lower() for char in input_str if char.isalnum())\n    return cleaned_str == cleaned_str[::-1]\n\ntest_input = \"A man, a plan, a canal: Panama\"\nprint(check_palindrome(test_input))\n```", "answer": "", "question_quality": "0", "code": ""}
{"key": "HumanEval/147_prompt", "name": "HumanEval/147", "prompt_type": "prompt", "index": 0, "response": "Sure, please provide the information that you would like to use to generate the Python3 code.", "answer": "", "question_quality": "0", "code": ""}
{"key": "HumanEval/148_prompt", "name": "HumanEval/148", "prompt_type": "prompt", "index": 0, "response": "```python\ndef is_prime(num):\n    if num < 2:\n        return False\n    for i in range(2, int(num ** 0.5) + 1):\n        if num % i == 0:\n            return False\n    return True\n\ndef generate_primes(n):\n    primes = []\n    i = 2\n    while len(primes) < n:\n        if is_prime(i):\n            primes.append(i)\n        i += 1\n    return primes\n\nn = 10\nprint(generate_primes(n))\n```", "answer": "", "question_quality": "0", "code": ""}
{"key": "HumanEval/149_prompt", "name": "HumanEval/149", "prompt_type": "prompt", "index": 0, "response": "```python\nclass SoftwareDeveloper:\n    def __init__(self, name, expertise):\n        self.name = name\n        self.expertise = expertise\n\n    def write_high_quality_code(self):\n        # Write high quality code here\n        pass\n\n# Example usage:\nexpert = SoftwareDeveloper(\"John Doe\", \"Python\")\nexpert.write_high_quality_code()\n```", "answer": "", "question_quality": "0", "code": ""}
{"key": "HumanEval/150_prompt", "name": "HumanEval/150", "prompt_type": "prompt", "index": 0, "response": "**Information:**\n\n- Purpose: Create a Python function that will return the sum of all even numbers in a list.\n\n- Input: A list of integers.\n\n- Output: An integer representing the sum of all even numbers in the list.\n\n- Example:\n    - Input: [1, 2, 3, 4, 5, 6]\n    - Output: 12\n\n**Python3 code:**\n\n```python\ndef sum_even_numbers(numbers):\n    return sum(num for num in numbers if num % 2 == 0)\n\n# Test the function with the provided example\nprint(sum_even_numbers([1, 2, 3, 4, 5, 6]))  # Output: 12\n```", "answer": "", "question_quality": "0", "code": ""}
{"key": "HumanEval/151_prompt", "name": "HumanEval/151", "prompt_type": "prompt", "index": 0, "response": "Sure, please provide the information that needs to be included in the Python3 code.", "answer": "", "question_quality": "0", "code": ""}
{"key": "HumanEval/152_prompt", "name": "HumanEval/152", "prompt_type": "prompt", "index": 0, "response": "```python\ndef calculate_average(scores):\n    if not scores:\n        return None\n    \n    total = sum(scores)\n    average = total / len(scores)\n    return average\n```", "answer": "", "question_quality": "0", "code": ""}
{"key": "HumanEval/153_prompt", "name": "HumanEval/153", "prompt_type": "prompt", "index": 0, "response": "```python\ndef calculate_sum_of_squares(numbers):\n    sum_of_squares = sum([num**2 for num in numbers])\n    return sum_of_squares\n\nnumbers = [1, 2, 3, 4, 5]\nresult = calculate_sum_of_squares(numbers)\nprint(result)\n```", "answer": "", "question_quality": "0", "code": ""}
{"key": "HumanEval/154_prompt", "name": "HumanEval/154", "prompt_type": "prompt", "index": 0, "response": "```python\ndef calculate_average(numbers):\n    total = sum(numbers)\n    average = total / len(numbers)\n    return average\n\nnumbers = [10, 20, 30, 40, 50]\navg = calculate_average(numbers)\nprint(\"The average is:\", avg)\n```", "answer": "", "question_quality": "0", "code": ""}
{"key": "HumanEval/155_prompt", "name": "HumanEval/155", "prompt_type": "prompt", "index": 0, "response": "```python\ndef calculate_average(nums):\n    if not nums:\n        return 0\n    \n    return sum(nums) / len(nums)\n\nnumbers = [5, 10, 15, 20, 25]\naverage = calculate_average(numbers)\nprint(\"Average:\", average)\n```", "answer": "", "question_quality": "0", "code": ""}
{"key": "HumanEval/156_prompt", "name": "HumanEval/156", "prompt_type": "prompt", "index": 0, "response": "```python\ndef calculate_fibonacci(n):\n    if n <= 0:\n        return []\n    elif n == 1:\n        return [0]\n    elif n == 2:\n        return [0, 1]\n    else:\n        fibonacci_sequence = [0, 1]\n        for i in range(2, n):\n            next_num = fibonacci_sequence[-1] + fibonacci_sequence[-2]\n            fibonacci_sequence.append(next_num)\n        return fibonacci_sequence\n\nn = 10\nfibonacci_sequence = calculate_fibonacci(n)\nprint(fibonacci_sequence)\n```", "answer": "", "question_quality": "0", "code": ""}
{"key": "HumanEval/157_prompt", "name": "HumanEval/157", "prompt_type": "prompt", "index": 0, "response": "```python\ndef generate_fibonacci_sequence(n):\n    fibonacci_sequence = []\n    a, b = 0, 1\n    for _ in range(n):\n        fibonacci_sequence.append(a)\n        a, b = b, a + b\n    return fibonacci_sequence\n\nn = 10\nfibonacci_sequence = generate_fibonacci_sequence(n)\nprint(fibonacci_sequence)\n```", "answer": "", "question_quality": "0", "code": ""}
{"key": "HumanEval/158_prompt", "name": "HumanEval/158", "prompt_type": "prompt", "index": 0, "response": "```python\ndef calculate_average(numbers):\n    if not numbers:\n        return 0\n    return sum(numbers) / len(numbers)\n\nnumbers = [10, 20, 30, 40, 50]\naverage = calculate_average(numbers)\nprint(\"Average:\", average)\n```", "answer": "", "question_quality": "0", "code": ""}
{"key": "HumanEval/159_prompt", "name": "HumanEval/159", "prompt_type": "prompt", "index": 0, "response": "### Problem:\nCreate a Python function that takes in a list of numbers and returns the sum of all the prime numbers in the list.\n\n### Example:\nInput: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\nOutput: 17 (since 2 + 3 + 5 + 7 = 17)\n\n### Note:\n- A prime number is a number that is greater than 1 and has no positive divisors other than 1 and itself.\n\n### Constraints:\n- The input list will have at most 10^5 elements.\n\n```python\ndef is_prime(num):\n    if num < 2:\n        return False\n    for i in range(2, int(num ** 0.5) + 1):\n        if num % i == 0:\n            return False\n    return True\n\ndef sum_of_primes(lst):\n    prime_sum = 0\n    for num in lst:\n        if is_prime(num):\n            prime_sum += num\n    return prime_sum\n\n# Test the function with the given example\ninput_list = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\nprint(sum_of_primes(input_list))\n```", "answer": "", "question_quality": "0", "code": ""}
{"key": "HumanEval/160_prompt", "name": "HumanEval/160", "prompt_type": "prompt", "index": 0, "response": "```python\ndef greeting(name):\n    if name:\n        print(f\"Hello, {name}!\")\n    else:\n        print(\"Hello!\")\n\ndef calculate_sum(num1, num2):\n    return num1 + num2\n\ndef is_even(num):\n    return num % 2 == 0\n```", "answer": "", "question_quality": "0", "code": ""}
{"key": "HumanEval/161_prompt", "name": "HumanEval/161", "prompt_type": "prompt", "index": 0, "response": "Sure, please provide me with the information that you would like me to use for generating the Python3 code.", "answer": "", "question_quality": "0", "code": ""}
{"key": "HumanEval/162_prompt", "name": "HumanEval/162", "prompt_type": "prompt", "index": 0, "response": "### Problem Statement:\nYou have been given two lists containing integer elements. Your task is to write a Python program to merge these two lists into one list, remove any duplicate elements, and sort the final list in ascending order.\n\n### Input:\nList1 = [4, 2, 9, 7, 5]\nList2 = [5, 2, 8, 3, 1]\n\n### Output:\nSorted and merged list without duplicates: [1, 2, 3, 4, 5, 7, 8, 9]\n\n```python\n# Given input lists\nList1 = [4, 2, 9, 7, 5]\nList2 = [5, 2, 8, 3, 1]\n\n# Merge the two lists\nmerged_list = list(set(List1 + List2))\n\n# Sort the merged list in ascending order\nmerged_list.sort()\n\nprint(\"Sorted and merged list without duplicates:\", merged_list)\n```", "answer": "", "question_quality": "0", "code": ""}
{"key": "HumanEval/163_prompt", "name": "HumanEval/163", "prompt_type": "prompt", "index": 0, "response": "```python\nclass SoftwareDeveloper:\n    def __init__(self, name, expertise, language):\n        self.name = name\n        self.expertise = expertise\n        self.language = language\n\n    def write_high_quality_code(self):\n        print(f\"{self.name} writes high quality code in {self.language}\")\n\n# Creating an instance of SoftwareDeveloper\ndeveloper = SoftwareDeveloper(\"John Doe\", \"expert\", \"Python\")\ndeveloper.write_high_quality_code()\n```", "answer": "", "question_quality": "0", "code": ""}
